[
  {
    "title": "Two Sum",
    "prompt": "Implement two_sum(nums, target) -> list[int]. Return indices of two numbers such that they add to target. Exactly one solution; do not use the same element twice.",
    "difficulty": 1,
    "initial_code": {
      "python": "def two_sum(nums, target):\n    # TODO: implement\n    pass\n",
      "javascript": "function two_sum(nums, target) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            -7,
            -12,
            6,
            -3,
            1,
            0
          ],
          "target": 7
        },
        "outputs": [
          2,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            5,
            16,
            -12
          ],
          "target": 21
        },
        "outputs": [
          1,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            -11,
            -9,
            -10,
            10,
            3,
            1,
            -12,
            4,
            8
          ],
          "target": -11
        },
        "outputs": [
          5,
          6
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            -10
          ],
          "target": -9
        },
        "outputs": [
          0,
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            11,
            6,
            8,
            -7,
            18
          ],
          "target": -1
        },
        "outputs": [
          1,
          3
        ]
      },
      {
        "inputs": {
          "nums": [
            -2,
            -7,
            13,
            18,
            5,
            19,
            9,
            4,
            -6
          ],
          "target": -13
        },
        "outputs": [
          1,
          8
        ]
      },
      {
        "inputs": {
          "nums": [
            15,
            -10,
            5
          ],
          "target": -5
        },
        "outputs": [
          1,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            -6,
            -1,
            16,
            -3,
            5,
            17,
            12
          ],
          "target": 2
        },
        "outputs": [
          3,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            4,
            -3,
            -6,
            -5,
            19
          ],
          "target": -9
        },
        "outputs": [
          1,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            -6,
            12,
            -2,
            16
          ],
          "target": 10
        },
        "outputs": [
          1,
          2
        ]
      }
    ],
    "target_func": "two_sum"
  },
  {
    "title": "Merge Two Sorted Lists (arrays)",
    "prompt": "Implement merge_two_lists(list1, list2) -> list[int]. Given two non-decreasing arrays, return a merged non-decreasing array.",
    "difficulty": 1,
    "initial_code": {
      "python": "def merge_two_lists(list1, list2):\n    # TODO: implement\n    pass\n",
      "javascript": "function merge_two_lists(list1, list2) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "list1": [],
          "list2": []
        },
        "outputs": []
      },
      {
        "inputs": {
          "list1": [
            1,
            3,
            5
          ],
          "list2": [
            2,
            4,
            6
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      {
        "inputs": {
          "list1": [
            1,
            2,
            4
          ],
          "list2": [
            1,
            3,
            4
          ]
        },
        "outputs": [
          1,
          1,
          2,
          3,
          4,
          4
        ]
      },
      {
        "inputs": {
          "list1": [
            0
          ],
          "list2": []
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "list1": [],
          "list2": [
            0
          ]
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "list1": [
            1,
            1,
            2
          ],
          "list2": [
            1,
            1,
            1,
            3
          ]
        },
        "outputs": [
          1,
          1,
          1,
          1,
          1,
          2,
          3
        ]
      },
      {
        "inputs": {
          "list1": [
            -5,
            -2,
            0,
            3
          ],
          "list2": [
            -6,
            -1,
            2,
            4,
            10
          ]
        },
        "outputs": [
          -6,
          -5,
          -2,
          -1,
          0,
          2,
          3,
          4,
          10
        ]
      },
      {
        "inputs": {
          "list1": [
            2,
            2,
            2
          ],
          "list2": [
            2,
            2
          ]
        },
        "outputs": [
          2,
          2,
          2,
          2,
          2
        ]
      },
      {
        "inputs": {
          "list1": [
            1,
            4,
            7,
            10
          ],
          "list2": [
            2,
            3,
            8,
            9,
            11
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4,
          7,
          8,
          9,
          10,
          11
        ]
      },
      {
        "inputs": {
          "list1": [
            5
          ],
          "list2": [
            1,
            2,
            3,
            4,
            6,
            7
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      }
    ],
    "target_func": "merge_two_lists"
  },
  {
    "title": "Best Time to Buy and Sell Stock",
    "prompt": "Implement max_profit(prices) -> int. You may buy once and sell once later. Return the maximum profit (0 if none).",
    "difficulty": 1,
    "initial_code": {
      "python": "def max_profit(prices):\n    # TODO: implement\n    pass\n",
      "javascript": "function max_profit(prices) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "prices": [
            7,
            1,
            5,
            3,
            6,
            4
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "prices": [
            7,
            6,
            4,
            3,
            1
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "prices": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "prices": [
            2,
            1,
            2,
            1,
            0,
            1,
            2
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "prices": [
            3,
            3,
            5,
            0,
            0,
            3,
            1,
            4
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "prices": [
            1
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "prices": [
            2,
            4,
            1
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "prices": [
            2,
            1,
            2,
            1,
            3
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "prices": [
            5,
            4,
            3,
            2,
            1,
            2
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "prices": [
            2,
            2,
            2,
            2,
            2
          ]
        },
        "outputs": 0
      }
    ],
    "target_func": "max_profit"
  },
  {
    "title": "Valid Palindrome",
    "prompt": "Implement is_palindrome(s) -> bool. Consider only alphanumerics and ignore case.",
    "difficulty": 1,
    "initial_code": {
      "python": "def is_palindrome(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_palindrome(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "A man, a plan, a canal: Panama"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "race a car"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": " "
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "abba"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "abcba"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "abc"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "0P"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "No lemon, no melon"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "Was it a car or a cat I saw?"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "123321"
        },
        "outputs": true
      }
    ],
    "target_func": "is_palindrome"
  },
  {
    "title": "Linked List Cycle (array form)",
    "prompt": "Implement has_cycle(nodes, pos) -> bool. nodes is an array of values; pos is the index that the tail connects to (-1 if none). Return True if a cycle would exist.",
    "difficulty": 1,
    "initial_code": {
      "python": "def has_cycle(nodes, pos):\n    # TODO: implement\n    pass\n",
      "javascript": "function has_cycle(nodes, pos) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nodes": [
            3,
            2,
            0,
            -4
          ],
          "pos": 1
        },
        "outputs": true
      },
      {
        "inputs": {
          "nodes": [
            1,
            2
          ],
          "pos": 0
        },
        "outputs": true
      },
      {
        "inputs": {
          "nodes": [
            1
          ],
          "pos": -1
        },
        "outputs": false
      },
      {
        "inputs": {
          "nodes": [
            1,
            2,
            3,
            4
          ],
          "pos": 3
        },
        "outputs": true
      },
      {
        "inputs": {
          "nodes": [
            1,
            2,
            3,
            4
          ],
          "pos": -1
        },
        "outputs": false
      },
      {
        "inputs": {
          "nodes": [
            0,
            0,
            0
          ],
          "pos": 2
        },
        "outputs": true
      },
      {
        "inputs": {
          "nodes": [],
          "pos": -1
        },
        "outputs": false
      },
      {
        "inputs": {
          "nodes": [
            9
          ],
          "pos": 0
        },
        "outputs": true
      },
      {
        "inputs": {
          "nodes": [
            5,
            6,
            7,
            8,
            9
          ],
          "pos": 4
        },
        "outputs": true
      },
      {
        "inputs": {
          "nodes": [
            10,
            11
          ],
          "pos": -1
        },
        "outputs": false
      }
    ],
    "target_func": "has_cycle"
  },
  {
    "title": "Reverse List (array)",
    "prompt": "Implement reverse_list(values) -> list[int]. Return the reversed list.",
    "difficulty": 1,
    "initial_code": {
      "python": "def reverse_list(values):\n    # TODO: implement\n    pass\n",
      "javascript": "function reverse_list(values) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "values": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": [
          5,
          4,
          3,
          2,
          1
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            2
          ]
        },
        "outputs": [
          2,
          1
        ]
      },
      {
        "inputs": {
          "values": []
        },
        "outputs": []
      },
      {
        "inputs": {
          "values": [
            7
          ]
        },
        "outputs": [
          7
        ]
      },
      {
        "inputs": {
          "values": [
            0,
            0,
            1,
            1
          ]
        },
        "outputs": [
          1,
          1,
          0,
          0
        ]
      },
      {
        "inputs": {
          "values": [
            5,
            4,
            3,
            2,
            1,
            0,
            -1
          ]
        },
        "outputs": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "inputs": {
          "values": [
            10,
            10,
            10
          ]
        },
        "outputs": [
          10,
          10,
          10
        ]
      },
      {
        "inputs": {
          "values": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ]
        },
        "outputs": [
          9,
          8,
          7,
          6,
          5,
          4,
          3,
          2,
          1,
          0
        ]
      },
      {
        "inputs": {
          "values": [
            -3,
            -2,
            -1,
            0,
            1
          ]
        },
        "outputs": [
          1,
          0,
          -1,
          -2,
          -3
        ]
      },
      {
        "inputs": {
          "values": [
            42
          ]
        },
        "outputs": [
          42
        ]
      }
    ],
    "target_func": "reverse_list"
  },
  {
    "title": "Binary Search",
    "prompt": "Implement binary_search(nums, target) -> int. Return the index of target in a sorted array, or -1 if not found.",
    "difficulty": 1,
    "initial_code": {
      "python": "def binary_search(nums, target):\n    # TODO: implement\n    pass\n",
      "javascript": "function binary_search(nums, target) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            -1,
            0,
            3,
            5,
            9,
            12
          ],
          "target": 9
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            -1,
            0,
            3,
            5,
            9,
            12
          ],
          "target": 2
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "target": 1
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "target": 0
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "target": -5
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "target": 5
        },
        "outputs": 10
      },
      {
        "inputs": {
          "nums": [
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "target": 0
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            2,
            5,
            8,
            12,
            16,
            23,
            38,
            56,
            72,
            91
          ],
          "target": 23
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            2,
            5,
            8,
            12,
            16,
            23,
            38,
            56,
            72,
            91
          ],
          "target": 3
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            0,
            1,
            3,
            5,
            7,
            9,
            11,
            13,
            15
          ],
          "target": 15
        },
        "outputs": 8
      }
    ],
    "target_func": "binary_search"
  },
  {
    "title": "First Bad Version",
    "prompt": "Implement first_bad_version(n, is_bad) -> int. is_bad is provided as an object {bad_from: k} in tests; the version is bad if v >= k. Return the smallest bad version.",
    "difficulty": 1,
    "initial_code": {
      "python": "def first_bad_version(n, is_bad):\n    # TODO: implement\n    pass\n",
      "javascript": "function first_bad_version(n, is_bad) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "n": 5,
          "is_bad": {
            "bad_from": 4
          }
        },
        "outputs": 4
      },
      {
        "inputs": {
          "n": 1,
          "is_bad": {
            "bad_from": 1
          }
        },
        "outputs": 1
      },
      {
        "inputs": {
          "n": 10,
          "is_bad": {
            "bad_from": 7
          }
        },
        "outputs": 7
      },
      {
        "inputs": {
          "n": 2,
          "is_bad": {
            "bad_from": 2
          }
        },
        "outputs": 2
      },
      {
        "inputs": {
          "n": 8,
          "is_bad": {
            "bad_from": 3
          }
        },
        "outputs": 3
      },
      {
        "inputs": {
          "n": 6,
          "is_bad": {
            "bad_from": 6
          }
        },
        "outputs": 6
      },
      {
        "inputs": {
          "n": 12,
          "is_bad": {
            "bad_from": 2
          }
        },
        "outputs": 2
      },
      {
        "inputs": {
          "n": 20,
          "is_bad": {
            "bad_from": 15
          }
        },
        "outputs": 15
      },
      {
        "inputs": {
          "n": 9,
          "is_bad": {
            "bad_from": 9
          }
        },
        "outputs": 9
      },
      {
        "inputs": {
          "n": 50,
          "is_bad": {
            "bad_from": 1
          }
        },
        "outputs": 1
      }
    ],
    "target_func": "first_bad_version"
  },
  {
    "title": "Ransom Note",
    "prompt": "Implement can_construct(ransomNote, magazine) -> bool. Return True if ransomNote can be constructed from letters of magazine.",
    "difficulty": 1,
    "initial_code": {
      "python": "def can_construct(ransomNote, magazine):\n    # TODO: implement\n    pass\n",
      "javascript": "function can_construct(ransomNote, magazine) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "ransomNote": "a",
          "magazine": "b"
        },
        "outputs": false
      },
      {
        "inputs": {
          "ransomNote": "aa",
          "magazine": "ab"
        },
        "outputs": false
      },
      {
        "inputs": {
          "ransomNote": "aa",
          "magazine": "aab"
        },
        "outputs": true
      },
      {
        "inputs": {
          "ransomNote": "abc",
          "magazine": "cba"
        },
        "outputs": true
      },
      {
        "inputs": {
          "ransomNote": "hello",
          "magazine": "lloeh"
        },
        "outputs": true
      },
      {
        "inputs": {
          "ransomNote": "xyz",
          "magazine": "xy"
        },
        "outputs": false
      },
      {
        "inputs": {
          "ransomNote": "",
          "magazine": "anything"
        },
        "outputs": true
      },
      {
        "inputs": {
          "ransomNote": "aaa",
          "magazine": "aaaaa"
        },
        "outputs": true
      },
      {
        "inputs": {
          "ransomNote": "abcabc",
          "magazine": "abccba"
        },
        "outputs": true
      },
      {
        "inputs": {
          "ransomNote": "longnote",
          "magazine": "longernotewithspaces"
        },
        "outputs": true
      }
    ],
    "target_func": "can_construct"
  },
  {
    "title": "Majority Element",
    "prompt": "Implement majority_element(nums) -> int. The majority element appears more than ⌊n/2⌋ times and is guaranteed to exist.",
    "difficulty": 1,
    "initial_code": {
      "python": "def majority_element(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function majority_element(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            3,
            2,
            3
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            1,
            1,
            1,
            2,
            2
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            2,
            3
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            5,
            5,
            5,
            5,
            1,
            2,
            3
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            9,
            9,
            8,
            9,
            7,
            9,
            9,
            6,
            9
          ]
        },
        "outputs": 9
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            1,
            0
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            -1,
            -1,
            -1,
            2,
            2
          ]
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            4,
            4,
            4,
            4,
            4
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            10,
            10,
            9,
            9,
            10,
            10,
            10
          ]
        },
        "outputs": 10
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            1,
            2,
            1,
            1,
            1
          ]
        },
        "outputs": 1
      }
    ],
    "target_func": "majority_element"
  },
  {
    "title": "Plus One",
    "prompt": "Implement plus_one(digits) -> list[int]. Add one to the integer represented by the digits array.",
    "difficulty": 1,
    "initial_code": {
      "python": "def plus_one(digits):\n    # TODO: implement\n    pass\n",
      "javascript": "function plus_one(digits) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "digits": [
            1,
            2,
            3
          ]
        },
        "outputs": [
          1,
          2,
          4
        ]
      },
      {
        "inputs": {
          "digits": [
            4,
            3,
            2,
            1
          ]
        },
        "outputs": [
          4,
          3,
          2,
          2
        ]
      },
      {
        "inputs": {
          "digits": [
            9
          ]
        },
        "outputs": [
          1,
          0
        ]
      },
      {
        "inputs": {
          "digits": [
            9,
            9,
            9
          ]
        },
        "outputs": [
          1,
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "digits": [
            0
          ]
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "digits": [
            2,
            9,
            9
          ]
        },
        "outputs": [
          3,
          0,
          0
        ]
      },
      {
        "inputs": {
          "digits": [
            9,
            0,
            9
          ]
        },
        "outputs": [
          9,
          1,
          0
        ]
      },
      {
        "inputs": {
          "digits": [
            1,
            0,
            0,
            0
          ]
        },
        "outputs": [
          1,
          0,
          0,
          1
        ]
      },
      {
        "inputs": {
          "digits": [
            8,
            9,
            9,
            9,
            9
          ]
        },
        "outputs": [
          9,
          0,
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "digits": [
            3,
            4,
            9,
            9,
            9
          ]
        },
        "outputs": [
          3,
          5,
          0,
          0,
          0
        ]
      }
    ],
    "target_func": "plus_one"
  },
  {
    "title": "Climbing Stairs",
    "prompt": "Implement climb_stairs(n) -> int. Each step you can climb 1 or 2 steps. Return how many distinct ways to climb to the top.",
    "difficulty": 1,
    "initial_code": {
      "python": "def climb_stairs(n):\n    # TODO: implement\n    pass\n",
      "javascript": "function climb_stairs(n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "n": 1
        },
        "outputs": 1
      },
      {
        "inputs": {
          "n": 2
        },
        "outputs": 2
      },
      {
        "inputs": {
          "n": 3
        },
        "outputs": 3
      },
      {
        "inputs": {
          "n": 4
        },
        "outputs": 5
      },
      {
        "inputs": {
          "n": 5
        },
        "outputs": 8
      },
      {
        "inputs": {
          "n": 6
        },
        "outputs": 13
      },
      {
        "inputs": {
          "n": 7
        },
        "outputs": 21
      },
      {
        "inputs": {
          "n": 8
        },
        "outputs": 34
      },
      {
        "inputs": {
          "n": 9
        },
        "outputs": 55
      },
      {
        "inputs": {
          "n": 10
        },
        "outputs": 89
      }
    ],
    "target_func": "climb_stairs"
  },
  {
    "title": "Valid Anagram",
    "prompt": "Implement is_anagram(s, t) -> bool.",
    "difficulty": 1,
    "initial_code": {
      "python": "def is_anagram(s, t):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_anagram(s, t) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "anagram",
          "t": "nagaram"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "rat",
          "t": "car"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "",
          "t": ""
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "a",
          "t": "a"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "ab",
          "t": "ba"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "silent",
          "t": "listen"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "hello",
          "t": "bello"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "xxy",
          "t": "yyx"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "aabbcc",
          "t": "abcabc"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "abc",
          "t": "abcd"
        },
        "outputs": false
      }
    ],
    "target_func": "is_anagram"
  },
  {
    "title": "Flood Fill",
    "prompt": "Implement flood_fill(image, sr, sc, color) -> list[list[int]]. Fill starting pixel and 4-connected region of the original color with 'color'.",
    "difficulty": 1,
    "initial_code": {
      "python": "def flood_fill(image, sr, sc, color):\n    # TODO: implement\n    pass\n",
      "javascript": "function flood_fill(image, sr, sc, color) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "image": [
            [
              1,
              1,
              1
            ],
            [
              1,
              1,
              0
            ],
            [
              1,
              0,
              1
            ]
          ],
          "sr": 1,
          "sc": 1,
          "color": 2
        },
        "outputs": [
          [
            2,
            2,
            2
          ],
          [
            2,
            2,
            0
          ],
          [
            2,
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ]
          ],
          "sr": 0,
          "sc": 0,
          "color": 0
        },
        "outputs": [
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              0,
              0,
              0
            ],
            [
              0,
              1,
              1
            ]
          ],
          "sr": 1,
          "sc": 1,
          "color": 1
        },
        "outputs": [
          [
            0,
            0,
            0
          ],
          [
            0,
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              2,
              2,
              2
            ],
            [
              2,
              1,
              2
            ],
            [
              2,
              2,
              2
            ]
          ],
          "sr": 1,
          "sc": 1,
          "color": 3
        },
        "outputs": [
          [
            2,
            2,
            2
          ],
          [
            2,
            3,
            2
          ],
          [
            2,
            2,
            2
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              1
            ]
          ],
          "sr": 0,
          "sc": 0,
          "color": 2
        },
        "outputs": [
          [
            2
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              1,
              1
            ],
            [
              1,
              1
            ]
          ],
          "sr": 0,
          "sc": 1,
          "color": 3
        },
        "outputs": [
          [
            3,
            3
          ],
          [
            3,
            3
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              3,
              3,
              3
            ],
            [
              3,
              3,
              3
            ]
          ],
          "sr": 1,
          "sc": 0,
          "color": 3
        },
        "outputs": [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              4,
              4,
              1
            ],
            [
              4,
              1,
              1
            ],
            [
              1,
              1,
              1
            ]
          ],
          "sr": 0,
          "sc": 0,
          "color": 5
        },
        "outputs": [
          [
            5,
            5,
            1
          ],
          [
            5,
            1,
            1
          ],
          [
            1,
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              9,
              9,
              9,
              9
            ],
            [
              9,
              8,
              8,
              9
            ],
            [
              9,
              8,
              8,
              9
            ],
            [
              9,
              9,
              9,
              9
            ]
          ],
          "sr": 1,
          "sc": 1,
          "color": 7
        },
        "outputs": [
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            7,
            7,
            9
          ],
          [
            9,
            7,
            7,
            9
          ],
          [
            9,
            9,
            9,
            9
          ]
        ]
      },
      {
        "inputs": {
          "image": [
            [
              1,
              2,
              1
            ],
            [
              2,
              1,
              2
            ],
            [
              1,
              2,
              1
            ]
          ],
          "sr": 1,
          "sc": 1,
          "color": 9
        },
        "outputs": [
          [
            1,
            2,
            1
          ],
          [
            2,
            9,
            2
          ],
          [
            1,
            2,
            1
          ]
        ]
      }
    ],
    "target_func": "flood_fill"
  },
  {
    "title": "Fibonacci Number",
    "prompt": "Implement fib(n) -> int. F(0)=0, F(1)=1, F(n)=F(n-1)+F(n-2).",
    "difficulty": 1,
    "initial_code": {
      "python": "def fib(n):\n    # TODO: implement\n    pass\n",
      "javascript": "function fib(n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "n": 0
        },
        "outputs": 0
      },
      {
        "inputs": {
          "n": 1
        },
        "outputs": 1
      },
      {
        "inputs": {
          "n": 2
        },
        "outputs": 1
      },
      {
        "inputs": {
          "n": 3
        },
        "outputs": 2
      },
      {
        "inputs": {
          "n": 4
        },
        "outputs": 3
      },
      {
        "inputs": {
          "n": 5
        },
        "outputs": 5
      },
      {
        "inputs": {
          "n": 6
        },
        "outputs": 8
      },
      {
        "inputs": {
          "n": 7
        },
        "outputs": 13
      },
      {
        "inputs": {
          "n": 8
        },
        "outputs": 21
      },
      {
        "inputs": {
          "n": 10
        },
        "outputs": 55
      }
    ],
    "target_func": "fib"
  },
  {
    "title": "Minimum Depth of Binary Tree (array form)",
    "prompt": "Implement min_depth(values) -> int, where values is a level-order array with None for missing nodes.",
    "difficulty": 1,
    "initial_code": {
      "python": "def min_depth(values):\n    # TODO: implement\n    pass\n",
      "javascript": "function min_depth(values) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "values": [
            3,
            9,
            20,
            null,
            null,
            15,
            7
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "values": [
            2,
            null,
            3,
            null,
            4,
            null,
            5,
            null,
            6
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "values": []
        },
        "outputs": 0
      },
      {
        "inputs": {
          "values": [
            1
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "values": [
            1,
            2
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "values": [
            1,
            null,
            2,
            3
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            2,
            3,
            3,
            null,
            null,
            4,
            4
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            null,
            3,
            null,
            4,
            null,
            5
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "values": [
            1,
            null,
            2,
            null,
            3
          ]
        },
        "outputs": 3
      }
    ],
    "target_func": "min_depth"
  },
  {
    "title": "Same Tree (array form)",
    "prompt": "Implement is_same_tree(p, q) -> bool where p and q are level-order arrays with None for missing nodes.",
    "difficulty": 1,
    "initial_code": {
      "python": "def is_same_tree(p, q):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_same_tree(p, q) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "p": [
            1,
            2,
            3
          ],
          "q": [
            1,
            2,
            3
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "p": [
            1,
            2
          ],
          "q": [
            1,
            null,
            2
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "p": [],
          "q": []
        },
        "outputs": true
      },
      {
        "inputs": {
          "p": [
            1
          ],
          "q": [
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "p": [
            1,
            2,
            1
          ],
          "q": [
            1,
            2,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "p": [
            1,
            2,
            3
          ],
          "q": [
            1,
            2,
            4
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "p": [
            1,
            null,
            2
          ],
          "q": [
            1,
            null,
            2
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "p": [
            1,
            2,
            null
          ],
          "q": [
            1,
            null,
            2
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "p": [
            2,
            1,
            3
          ],
          "q": [
            2,
            1,
            3
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "p": [
            0
          ],
          "q": [
            1
          ]
        },
        "outputs": false
      }
    ],
    "target_func": "is_same_tree"
  },
  {
    "title": "Balanced Binary Tree (array form)",
    "prompt": "Implement is_balanced(values) -> bool. values is level-order with None for missing nodes.",
    "difficulty": 1,
    "initial_code": {
      "python": "def is_balanced(values):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_balanced(values) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "values": [
            3,
            9,
            20,
            null,
            null,
            15,
            7
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            2,
            3,
            3,
            null,
            null,
            4,
            4
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "values": []
        },
        "outputs": true
      },
      {
        "inputs": {
          "values": [
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            2,
            3,
            null,
            null,
            3,
            4,
            null,
            null,
            4
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            3
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            null,
            3
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "values": [
            1,
            null,
            2,
            null,
            3
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            2,
            3,
            4,
            4,
            3
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            2,
            3,
            null,
            null,
            3,
            4,
            null,
            null,
            4
          ]
        },
        "outputs": false
      }
    ],
    "target_func": "is_balanced"
  },
  {
    "title": "Contains Duplicate",
    "prompt": "Implement contains_duplicate(nums) -> bool. Return True if any value appears at least twice.",
    "difficulty": 1,
    "initial_code": {
      "python": "def contains_duplicate(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function contains_duplicate(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            3,
            3,
            4,
            3,
            2,
            4,
            2
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": []
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            0
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            -1,
            -2,
            -3,
            -1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            10,
            9,
            8,
            7,
            6,
            5
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            2,
            14,
            18,
            22,
            18
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            100,
            100,
            100
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            5
          ]
        },
        "outputs": true
      }
    ],
    "target_func": "contains_duplicate"
  },
  {
    "title": "Valid Parentheses",
    "prompt": "Implement is_valid_parentheses(s) -> bool. Brackets: (), {}, [].",
    "difficulty": 1,
    "initial_code": {
      "python": "def is_valid_parentheses(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_valid_parentheses(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "()"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "()[]{}"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "(]"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "([)]"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "{[]}"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": ""
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "((((()))))"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "){"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "([{}])"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "(((()))"
        },
        "outputs": false
      }
    ],
    "target_func": "is_valid_parentheses"
  },
  {
    "title": "Add Two Numbers (reversed arrays)",
    "prompt": "Implement add_two_numbers(l1, l2) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def add_two_numbers(l1, l2):\n    # TODO: implement\n    pass\n",
      "javascript": "function add_two_numbers(l1, l2) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "l1": [
            2,
            4,
            3
          ],
          "l2": [
            5,
            6,
            4
          ]
        },
        "outputs": [
          7,
          0,
          8
        ]
      },
      {
        "inputs": {
          "l1": [
            0
          ],
          "l2": [
            0
          ]
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "l1": [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          "l2": [
            9,
            9,
            9,
            9
          ]
        },
        "outputs": [
          8,
          9,
          9,
          9,
          0,
          0,
          0,
          1
        ]
      },
      {
        "inputs": {
          "l1": [
            1
          ],
          "l2": [
            9,
            9,
            9
          ]
        },
        "outputs": [
          0,
          0,
          0,
          1
        ]
      },
      {
        "inputs": {
          "l1": [
            5,
            6
          ],
          "l2": [
            5
          ]
        },
        "outputs": [
          0,
          7
        ]
      },
      {
        "inputs": {
          "l1": [
            0,
            1
          ],
          "l2": [
            0,
            1
          ]
        },
        "outputs": [
          0,
          2
        ]
      },
      {
        "inputs": {
          "l1": [
            1,
            8
          ],
          "l2": [
            0
          ]
        },
        "outputs": [
          1,
          8
        ]
      },
      {
        "inputs": {
          "l1": [
            9
          ],
          "l2": [
            1
          ]
        },
        "outputs": [
          0,
          1
        ]
      },
      {
        "inputs": {
          "l1": [
            3,
            4,
            5
          ],
          "l2": [
            7,
            8,
            9
          ]
        },
        "outputs": [
          0,
          3,
          5,
          1
        ]
      },
      {
        "inputs": {
          "l1": [
            9,
            9
          ],
          "l2": [
            9,
            9
          ]
        },
        "outputs": [
          8,
          9,
          1
        ]
      }
    ],
    "target_func": "add_two_numbers"
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "prompt": "Implement length_of_longest_substring(s) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def length_of_longest_substring(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function length_of_longest_substring(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "abcabcbb"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "s": "bbbbb"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "pwwkew"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "s": ""
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "au"
        },
        "outputs": 2
      },
      {
        "inputs": {
          "s": "aab"
        },
        "outputs": 2
      },
      {
        "inputs": {
          "s": "dvdf"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "s": "abba"
        },
        "outputs": 2
      },
      {
        "inputs": {
          "s": "tmmzuxt"
        },
        "outputs": 5
      },
      {
        "inputs": {
          "s": "anviaj"
        },
        "outputs": 5
      }
    ],
    "target_func": "length_of_longest_substring"
  },
  {
    "title": "Longest Palindromic Substring",
    "prompt": "Implement longest_palindrome(s) -> str.",
    "difficulty": 2,
    "initial_code": {
      "python": "def longest_palindrome(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function longest_palindrome(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "babad"
        },
        "outputs": "bab"
      },
      {
        "inputs": {
          "s": "cbbd"
        },
        "outputs": "bb"
      },
      {
        "inputs": {
          "s": "a"
        },
        "outputs": "a"
      },
      {
        "inputs": {
          "s": "ac"
        },
        "outputs": "a"
      },
      {
        "inputs": {
          "s": "forgeeksskeegfor"
        },
        "outputs": "geeksskeeg"
      },
      {
        "inputs": {
          "s": "abacab"
        },
        "outputs": "bacab"
      },
      {
        "inputs": {
          "s": "bb"
        },
        "outputs": "bb"
      },
      {
        "inputs": {
          "s": "abcd"
        },
        "outputs": "a"
      },
      {
        "inputs": {
          "s": "racecar"
        },
        "outputs": "racecar"
      },
      {
        "inputs": {
          "s": "anana"
        },
        "outputs": "anana"
      }
    ],
    "target_func": "longest_palindrome"
  },
  {
    "title": "3Sum",
    "prompt": "Implement three_sum(nums) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def three_sum(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function three_sum(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            -1,
            0,
            1,
            2,
            -1,
            -4
          ]
        },
        "outputs": [
          [
            -1,
            -1,
            2
          ],
          [
            -1,
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            1,
            1
          ]
        },
        "outputs": []
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            0
          ]
        },
        "outputs": [
          [
            0,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            -2,
            0,
            1,
            1,
            2
          ]
        },
        "outputs": [
          [
            -2,
            0,
            2
          ],
          [
            -2,
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            -4,
            -2,
            -1,
            0,
            1,
            2,
            3,
            4
          ]
        },
        "outputs": [
          [
            -4,
            0,
            4
          ],
          [
            -4,
            1,
            3
          ],
          [
            -2,
            -1,
            3
          ],
          [
            -2,
            0,
            2
          ],
          [
            -1,
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            3,
            0,
            -2,
            -1,
            1,
            2
          ]
        },
        "outputs": [
          [
            -2,
            -1,
            3
          ],
          [
            -2,
            0,
            2
          ],
          [
            -1,
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            -1,
            -1,
            0,
            1,
            2,
            -1,
            -4
          ]
        },
        "outputs": [
          [
            -1,
            -1,
            2
          ],
          [
            -1,
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            -2,
            -1
          ]
        },
        "outputs": []
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            0,
            0
          ]
        },
        "outputs": [
          [
            0,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            -5,
            2,
            3,
            0,
            0,
            0,
            1,
            4,
            -1,
            -2
          ]
        },
        "outputs": [
          [
            -5,
            1,
            4
          ],
          [
            -5,
            2,
            3
          ],
          [
            -2,
            -1,
            3
          ],
          [
            -2,
            0,
            2
          ],
          [
            -1,
            0,
            1
          ],
          [
            0,
            0,
            0
          ]
        ]
      }
    ],
    "target_func": "three_sum"
  },
  {
    "title": "Container With Most Water",
    "prompt": "Implement max_area(height) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def max_area(height):\n    # TODO: implement\n    pass\n",
      "javascript": "function max_area(height) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "height": [
            1,
            8,
            6,
            2,
            5,
            4,
            8,
            3,
            7
          ]
        },
        "outputs": 49
      },
      {
        "inputs": {
          "height": [
            1,
            1
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "height": [
            4,
            3,
            2,
            1,
            4
          ]
        },
        "outputs": 16
      },
      {
        "inputs": {
          "height": [
            1,
            2,
            1
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "height": [
            2,
            3,
            10,
            5,
            7,
            8,
            9
          ]
        },
        "outputs": 36
      },
      {
        "inputs": {
          "height": [
            2,
            2,
            2,
            2,
            2,
            2
          ]
        },
        "outputs": 10
      },
      {
        "inputs": {
          "height": [
            6,
            4,
            3,
            1,
            4,
            6,
            99,
            62,
            1,
            2,
            3
          ]
        },
        "outputs": 62
      },
      {
        "inputs": {
          "height": [
            1,
            2,
            4,
            3
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "height": [
            9,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1
          ]
        },
        "outputs": 20
      },
      {
        "inputs": {
          "height": [
            5,
            5,
            5,
            5,
            5
          ]
        },
        "outputs": 20
      }
    ],
    "target_func": "max_area"
  },
  {
    "title": "String to Integer (atoi)",
    "prompt": "Implement my_atoi(s) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def my_atoi(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function my_atoi(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "42"
        },
        "outputs": 42
      },
      {
        "inputs": {
          "s": "   -42"
        },
        "outputs": -42
      },
      {
        "inputs": {
          "s": "4193 with words"
        },
        "outputs": 4193
      },
      {
        "inputs": {
          "s": "words and 987"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "-91283472332"
        },
        "outputs": -2147483648
      },
      {
        "inputs": {
          "s": "+1"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "+-12"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "00000-42a1234"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "  +0 123"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "2147483648"
        },
        "outputs": 2147483647
      }
    ],
    "target_func": "my_atoi"
  },
  {
    "title": "Letter Combinations of a Phone Number",
    "prompt": "Implement letter_combinations(digits) -> list[str].",
    "difficulty": 2,
    "initial_code": {
      "python": "def letter_combinations(digits):\n    # TODO: implement\n    pass\n",
      "javascript": "function letter_combinations(digits) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "digits": "23"
        },
        "outputs": [
          "ad",
          "ae",
          "af",
          "bd",
          "be",
          "bf",
          "cd",
          "ce",
          "cf"
        ]
      },
      {
        "inputs": {
          "digits": ""
        },
        "outputs": []
      },
      {
        "inputs": {
          "digits": "2"
        },
        "outputs": [
          "a",
          "b",
          "c"
        ]
      },
      {
        "inputs": {
          "digits": "7"
        },
        "outputs": [
          "p",
          "q",
          "r",
          "s"
        ]
      },
      {
        "inputs": {
          "digits": "9"
        },
        "outputs": [
          "w",
          "x",
          "y",
          "z"
        ]
      },
      {
        "inputs": {
          "digits": "79"
        },
        "outputs": [
          "pw",
          "px",
          "py",
          "pz",
          "qw",
          "qx",
          "qy",
          "qz",
          "rw",
          "rx",
          "ry",
          "rz",
          "sw",
          "sx",
          "sy",
          "sz"
        ]
      },
      {
        "inputs": {
          "digits": "234"
        },
        "outputs": [
          "adg",
          "adh",
          "adi",
          "aeg",
          "aeh",
          "aei",
          "afg",
          "afh",
          "afi",
          "bdg",
          "bdh",
          "bdi",
          "beg",
          "beh",
          "bei",
          "bfg",
          "bfh",
          "bfi",
          "cdg",
          "cdh",
          "cdi",
          "ceg",
          "ceh",
          "cei",
          "cfg",
          "cfh",
          "cfi"
        ]
      },
      {
        "inputs": {
          "digits": "568"
        },
        "outputs": [
          "jmt",
          "jmu",
          "jmv",
          "jnt",
          "jnu",
          "jnv",
          "jot",
          "jou",
          "jov",
          "kmt",
          "kmu",
          "kmv",
          "knt",
          "knu",
          "knv",
          "kot",
          "kou",
          "kov",
          "lmt",
          "lmu",
          "lmv",
          "lnt",
          "lnu",
          "lnv",
          "lot",
          "lou",
          "lov"
        ]
      },
      {
        "inputs": {
          "digits": "222"
        },
        "outputs": [
          "aaa",
          "aab",
          "aac",
          "aba",
          "abb",
          "abc",
          "aca",
          "acb",
          "acc",
          "baa",
          "bab",
          "bac",
          "bba",
          "bbb",
          "bbc",
          "bca",
          "bcb",
          "bcc",
          "caa",
          "cab",
          "cac",
          "cba",
          "cbb",
          "cbc",
          "cca",
          "ccb",
          "ccc"
        ]
      },
      {
        "inputs": {
          "digits": "739"
        },
        "outputs": [
          "pdw",
          "pdx",
          "pdy",
          "pdz",
          "pew",
          "pex",
          "pey",
          "pez",
          "pfw",
          "pfx",
          "pfy",
          "pfz",
          "qdw",
          "qdx",
          "qdy",
          "qdz",
          "qew",
          "qex",
          "qey",
          "qez",
          "qfw",
          "qfx",
          "qfy",
          "qfz",
          "rdw",
          "rdx",
          "rdy",
          "rdz",
          "rew",
          "rex",
          "rey",
          "rez",
          "rfw",
          "rfx",
          "rfy",
          "rfz",
          "sdw",
          "sdx",
          "sdy",
          "sdz",
          "sew",
          "sex",
          "sey",
          "sez",
          "sfw",
          "sfx",
          "sfy",
          "sfz"
        ]
      }
    ],
    "target_func": "letter_combinations"
  },
  {
    "title": "Generate Parentheses",
    "prompt": "Implement generate_parenthesis(n) -> list[str].",
    "difficulty": 2,
    "initial_code": {
      "python": "def generate_parenthesis(n):\n    # TODO: implement\n    pass\n",
      "javascript": "function generate_parenthesis(n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "n": 1
        },
        "outputs": [
          "()"
        ]
      },
      {
        "inputs": {
          "n": 2
        },
        "outputs": [
          "(())",
          "()()"
        ]
      },
      {
        "inputs": {
          "n": 3
        },
        "outputs": [
          "((()))",
          "(()())",
          "(())()",
          "()(())",
          "()()()"
        ]
      },
      {
        "inputs": {
          "n": 4
        },
        "outputs": [
          "(((())))",
          "((()()))",
          "((())())",
          "((()))()",
          "(()(()))",
          "(()()())",
          "(()())()",
          "(())(())",
          "(())()()",
          "()((()))",
          "()(()())",
          "()(())()",
          "()()(())",
          "()()()()"
        ]
      },
      {
        "inputs": {
          "n": 5
        },
        "outputs": [
          "((((()))))",
          "(((()())))",
          "(((())()))",
          "(((()))())",
          "(((())))()",
          "((()(())))",
          "((()()()))",
          "((()())())",
          "((()()))()",
          "((())(()))",
          "((())()())",
          "((())())()",
          "((()))(())",
          "((()))()()",
          "(()((())))",
          "(()(()()))",
          "(()(())())",
          "(()(()))()",
          "(()()(()))",
          "(()()()())",
          "(()()())()",
          "(()())(())",
          "(()())()()",
          "(())((()))",
          "(())(()())",
          "(())(())()",
          "(())()(())",
          "(())()()()",
          "()(((())))",
          "()((()()))",
          "()((())())",
          "()((()))()",
          "()(()(()))",
          "()(()()())",
          "()(()())()",
          "()(())(())",
          "()(())()()",
          "()()((()))",
          "()()(()())",
          "()()(())()",
          "()()()(())",
          "()()()()()"
        ]
      },
      {
        "inputs": {
          "n": 6
        },
        "outputs": [
          "(((((())))))",
          "((((()()))))",
          "((((())())))",
          "((((()))()))",
          "((((())))())",
          "((((()))))()",
          "(((()(()))))",
          "(((()()())))",
          "(((()())()))",
          "(((()()))())",
          "(((()())))()",
          "(((())(())))",
          "(((())()()))",
          "(((())())())",
          "(((())()))()",
          "(((()))(()))",
          "(((()))()())",
          "(((()))())()",
          "(((())))(())",
          "(((())))()()",
          "((()((()))))",
          "((()(()())))",
          "((()(())()))",
          "((()(()))())",
          "((()(())))()",
          "((()()(())))",
          "((()()()()))",
          "((()()())())",
          "((()()()))()",
          "((()())(()))",
          "((()())()())",
          "((()())())()",
          "((()()))(())",
          "((()()))()()",
          "((())((())))",
          "((())(()()))",
          "((())(())())",
          "((())(()))()",
          "((())()(()))",
          "((())()()())",
          "((())()())()",
          "((())())(())",
          "((())())()()",
          "((()))((()))",
          "((()))(()())",
          "((()))(())()",
          "((()))()(())",
          "((()))()()()",
          "(()(((()))))",
          "(()((()())))",
          "(()((())()))",
          "(()((()))())",
          "(()((())))()",
          "(()(()(())))",
          "(()(()()()))",
          "(()(()())())",
          "(()(()()))()",
          "(()(())(()))",
          "(()(())()())",
          "(()(())())()",
          "(()(()))(())",
          "(()(()))()()",
          "(()()((())))",
          "(()()(()()))",
          "(()()(())())",
          "(()()(()))()",
          "(()()()(()))",
          "(()()()()())",
          "(()()()())()",
          "(()()())(())",
          "(()()())()()",
          "(()())((()))",
          "(()())(()())",
          "(()())(())()",
          "(()())()(())",
          "(()())()()()",
          "(())(((())))",
          "(())((()()))",
          "(())((())())",
          "(())((()))()",
          "(())(()(()))",
          "(())(()()())",
          "(())(()())()",
          "(())(())(())",
          "(())(())()()",
          "(())()((()))",
          "(())()(()())",
          "(())()(())()",
          "(())()()(())",
          "(())()()()()",
          "()((((()))))",
          "()(((()())))",
          "()(((())()))",
          "()(((()))())",
          "()(((())))()",
          "()((()(())))",
          "()((()()()))",
          "()((()())())",
          "()((()()))()",
          "()((())(()))",
          "()((())()())",
          "()((())())()",
          "()((()))(())",
          "()((()))()()",
          "()(()((())))",
          "()(()(()()))",
          "()(()(())())",
          "()(()(()))()",
          "()(()()(()))",
          "()(()()()())",
          "()(()()())()",
          "()(()())(())",
          "()(()())()()",
          "()(())((()))",
          "()(())(()())",
          "()(())(())()",
          "()(())()(())",
          "()(())()()()",
          "()()(((())))",
          "()()((()()))",
          "()()((())())",
          "()()((()))()",
          "()()(()(()))",
          "()()(()()())",
          "()()(()())()",
          "()()(())(())",
          "()()(())()()",
          "()()()((()))",
          "()()()(()())",
          "()()()(())()",
          "()()()()(())",
          "()()()()()()"
        ]
      },
      {
        "inputs": {
          "n": 0
        },
        "outputs": [
          ""
        ]
      },
      {
        "inputs": {
          "n": 7
        },
        "outputs": [
          "((((((()))))))",
          "(((((()())))))",
          "(((((())()))))",
          "(((((()))())))",
          "(((((())))()))",
          "(((((()))))())",
          "(((((())))))()",
          "((((()(())))))",
          "((((()()()))))",
          "((((()())())))",
          "((((()()))()))",
          "((((()())))())",
          "((((()()))))()",
          "((((())(()))))",
          "((((())()())))",
          "((((())())()))",
          "((((())()))())",
          "((((())())))()",
          "((((()))(())))",
          "((((()))()()))",
          "((((()))())())",
          "((((()))()))()",
          "((((())))(()))",
          "((((())))()())",
          "((((())))())()",
          "((((()))))(())",
          "((((()))))()()",
          "(((()((())))))",
          "(((()(()()))))",
          "(((()(())())))",
          "(((()(()))()))",
          "(((()(())))())",
          "(((()(()))))()",
          "(((()()(()))))",
          "(((()()()())))",
          "(((()()())()))",
          "(((()()()))())",
          "(((()()())))()",
          "(((()())(())))",
          "(((()())()()))",
          "(((()())())())",
          "(((()())()))()",
          "(((()()))(()))",
          "(((()()))()())",
          "(((()()))())()",
          "(((()())))(())",
          "(((()())))()()",
          "(((())((()))))",
          "(((())(()())))",
          "(((())(())()))",
          "(((())(()))())",
          "(((())(())))()",
          "(((())()(())))",
          "(((())()()()))",
          "(((())()())())",
          "(((())()()))()",
          "(((())())(()))",
          "(((())())()())",
          "(((())())())()",
          "(((())()))(())",
          "(((())()))()()",
          "(((()))((())))",
          "(((()))(()()))",
          "(((()))(())())",
          "(((()))(()))()",
          "(((()))()(()))",
          "(((()))()()())",
          "(((()))()())()",
          "(((()))())(())",
          "(((()))())()()",
          "(((())))((()))",
          "(((())))(()())",
          "(((())))(())()",
          "(((())))()(())",
          "(((())))()()()",
          "((()(((())))))",
          "((()((()()))))",
          "((()((())())))",
          "((()((()))()))",
          "((()((())))())",
          "((()((()))))()",
          "((()(()(()))))",
          "((()(()()())))",
          "((()(()())()))",
          "((()(()()))())",
          "((()(()())))()",
          "((()(())(())))",
          "((()(())()()))",
          "((()(())())())",
          "((()(())()))()",
          "((()(()))(()))",
          "((()(()))()())",
          "((()(()))())()",
          "((()(())))(())",
          "((()(())))()()",
          "((()()((()))))",
          "((()()(()())))",
          "((()()(())()))",
          "((()()(()))())",
          "((()()(())))()",
          "((()()()(())))",
          "((()()()()()))",
          "((()()()())())",
          "((()()()()))()",
          "((()()())(()))",
          "((()()())()())",
          "((()()())())()",
          "((()()()))(())",
          "((()()()))()()",
          "((()())((())))",
          "((()())(()()))",
          "((()())(())())",
          "((()())(()))()",
          "((()())()(()))",
          "((()())()()())",
          "((()())()())()",
          "((()())())(())",
          "((()())())()()",
          "((()()))((()))",
          "((()()))(()())",
          "((()()))(())()",
          "((()()))()(())",
          "((()()))()()()",
          "((())(((()))))",
          "((())((()())))",
          "((())((())()))",
          "((())((()))())",
          "((())((())))()",
          "((())(()(())))",
          "((())(()()()))",
          "((())(()())())",
          "((())(()()))()",
          "((())(())(()))",
          "((())(())()())",
          "((())(())())()",
          "((())(()))(())",
          "((())(()))()()",
          "((())()((())))",
          "((())()(()()))",
          "((())()(())())",
          "((())()(()))()",
          "((())()()(()))",
          "((())()()()())",
          "((())()()())()",
          "((())()())(())",
          "((())()())()()",
          "((())())((()))",
          "((())())(()())",
          "((())())(())()",
          "((())())()(())",
          "((())())()()()",
          "((()))(((())))",
          "((()))((()()))",
          "((()))((())())",
          "((()))((()))()",
          "((()))(()(()))",
          "((()))(()()())",
          "((()))(()())()",
          "((()))(())(())",
          "((()))(())()()",
          "((()))()((()))",
          "((()))()(()())",
          "((()))()(())()",
          "((()))()()(())",
          "((()))()()()()",
          "(()((((())))))",
          "(()(((()()))))",
          "(()(((())())))",
          "(()(((()))()))",
          "(()(((())))())",
          "(()(((()))))()",
          "(()((()(()))))",
          "(()((()()())))",
          "(()((()())()))",
          "(()((()()))())",
          "(()((()())))()",
          "(()((())(())))",
          "(()((())()()))",
          "(()((())())())",
          "(()((())()))()",
          "(()((()))(()))",
          "(()((()))()())",
          "(()((()))())()",
          "(()((())))(())",
          "(()((())))()()",
          "(()(()((()))))",
          "(()(()(()())))",
          "(()(()(())()))",
          "(()(()(()))())",
          "(()(()(())))()",
          "(()(()()(())))",
          "(()(()()()()))",
          "(()(()()())())",
          "(()(()()()))()",
          "(()(()())(()))",
          "(()(()())()())",
          "(()(()())())()",
          "(()(()()))(())",
          "(()(()()))()()",
          "(()(())((())))",
          "(()(())(()()))",
          "(()(())(())())",
          "(()(())(()))()",
          "(()(())()(()))",
          "(()(())()()())",
          "(()(())()())()",
          "(()(())())(())",
          "(()(())())()()",
          "(()(()))((()))",
          "(()(()))(()())",
          "(()(()))(())()",
          "(()(()))()(())",
          "(()(()))()()()",
          "(()()(((()))))",
          "(()()((()())))",
          "(()()((())()))",
          "(()()((()))())",
          "(()()((())))()",
          "(()()(()(())))",
          "(()()(()()()))",
          "(()()(()())())",
          "(()()(()()))()",
          "(()()(())(()))",
          "(()()(())()())",
          "(()()(())())()",
          "(()()(()))(())",
          "(()()(()))()()",
          "(()()()((())))",
          "(()()()(()()))",
          "(()()()(())())",
          "(()()()(()))()",
          "(()()()()(()))",
          "(()()()()()())",
          "(()()()()())()",
          "(()()()())(())",
          "(()()()())()()",
          "(()()())((()))",
          "(()()())(()())",
          "(()()())(())()",
          "(()()())()(())",
          "(()()())()()()",
          "(()())(((())))",
          "(()())((()()))",
          "(()())((())())",
          "(()())((()))()",
          "(()())(()(()))",
          "(()())(()()())",
          "(()())(()())()",
          "(()())(())(())",
          "(()())(())()()",
          "(()())()((()))",
          "(()())()(()())",
          "(()())()(())()",
          "(()())()()(())",
          "(()())()()()()",
          "(())((((()))))",
          "(())(((()())))",
          "(())(((())()))",
          "(())(((()))())",
          "(())(((())))()",
          "(())((()(())))",
          "(())((()()()))",
          "(())((()())())",
          "(())((()()))()",
          "(())((())(()))",
          "(())((())()())",
          "(())((())())()",
          "(())((()))(())",
          "(())((()))()()",
          "(())(()((())))",
          "(())(()(()()))",
          "(())(()(())())",
          "(())(()(()))()",
          "(())(()()(()))",
          "(())(()()()())",
          "(())(()()())()",
          "(())(()())(())",
          "(())(()())()()",
          "(())(())((()))",
          "(())(())(()())",
          "(())(())(())()",
          "(())(())()(())",
          "(())(())()()()",
          "(())()(((())))",
          "(())()((()()))",
          "(())()((())())",
          "(())()((()))()",
          "(())()(()(()))",
          "(())()(()()())",
          "(())()(()())()",
          "(())()(())(())",
          "(())()(())()()",
          "(())()()((()))",
          "(())()()(()())",
          "(())()()(())()",
          "(())()()()(())",
          "(())()()()()()",
          "()(((((())))))",
          "()((((()()))))",
          "()((((())())))",
          "()((((()))()))",
          "()((((())))())",
          "()((((()))))()",
          "()(((()(()))))",
          "()(((()()())))",
          "()(((()())()))",
          "()(((()()))())",
          "()(((()())))()",
          "()(((())(())))",
          "()(((())()()))",
          "()(((())())())",
          "()(((())()))()",
          "()(((()))(()))",
          "()(((()))()())",
          "()(((()))())()",
          "()(((())))(())",
          "()(((())))()()",
          "()((()((()))))",
          "()((()(()())))",
          "()((()(())()))",
          "()((()(()))())",
          "()((()(())))()",
          "()((()()(())))",
          "()((()()()()))",
          "()((()()())())",
          "()((()()()))()",
          "()((()())(()))",
          "()((()())()())",
          "()((()())())()",
          "()((()()))(())",
          "()((()()))()()",
          "()((())((())))",
          "()((())(()()))",
          "()((())(())())",
          "()((())(()))()",
          "()((())()(()))",
          "()((())()()())",
          "()((())()())()",
          "()((())())(())",
          "()((())())()()",
          "()((()))((()))",
          "()((()))(()())",
          "()((()))(())()",
          "()((()))()(())",
          "()((()))()()()",
          "()(()(((()))))",
          "()(()((()())))",
          "()(()((())()))",
          "()(()((()))())",
          "()(()((())))()",
          "()(()(()(())))",
          "()(()(()()()))",
          "()(()(()())())",
          "()(()(()()))()",
          "()(()(())(()))",
          "()(()(())()())",
          "()(()(())())()",
          "()(()(()))(())",
          "()(()(()))()()",
          "()(()()((())))",
          "()(()()(()()))",
          "()(()()(())())",
          "()(()()(()))()",
          "()(()()()(()))",
          "()(()()()()())",
          "()(()()()())()",
          "()(()()())(())",
          "()(()()())()()",
          "()(()())((()))",
          "()(()())(()())",
          "()(()())(())()",
          "()(()())()(())",
          "()(()())()()()",
          "()(())(((())))",
          "()(())((()()))",
          "()(())((())())",
          "()(())((()))()",
          "()(())(()(()))",
          "()(())(()()())",
          "()(())(()())()",
          "()(())(())(())",
          "()(())(())()()",
          "()(())()((()))",
          "()(())()(()())",
          "()(())()(())()",
          "()(())()()(())",
          "()(())()()()()",
          "()()((((()))))",
          "()()(((()())))",
          "()()(((())()))",
          "()()(((()))())",
          "()()(((())))()",
          "()()((()(())))",
          "()()((()()()))",
          "()()((()())())",
          "()()((()()))()",
          "()()((())(()))",
          "()()((())()())",
          "()()((())())()",
          "()()((()))(())",
          "()()((()))()()",
          "()()(()((())))",
          "()()(()(()()))",
          "()()(()(())())",
          "()()(()(()))()",
          "()()(()()(()))",
          "()()(()()()())",
          "()()(()()())()",
          "()()(()())(())",
          "()()(()())()()",
          "()()(())((()))",
          "()()(())(()())",
          "()()(())(())()",
          "()()(())()(())",
          "()()(())()()()",
          "()()()(((())))",
          "()()()((()()))",
          "()()()((())())",
          "()()()((()))()",
          "()()()(()(()))",
          "()()()(()()())",
          "()()()(()())()",
          "()()()(())(())",
          "()()()(())()()",
          "()()()()((()))",
          "()()()()(()())",
          "()()()()(())()",
          "()()()()()(())",
          "()()()()()()()"
        ]
      },
      {
        "inputs": {
          "n": 3
        },
        "outputs": [
          "((()))",
          "(()())",
          "(())()",
          "()(())",
          "()()()"
        ]
      },
      {
        "inputs": {
          "n": 2
        },
        "outputs": [
          "(())",
          "()()"
        ]
      }
    ],
    "target_func": "generate_parenthesis"
  },
  {
    "title": "Search in Rotated Sorted Array",
    "prompt": "Implement search_rotated(nums, target) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def search_rotated(nums, target):\n    # TODO: implement\n    pass\n",
      "javascript": "function search_rotated(nums, target) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            4,
            5,
            6,
            7,
            0,
            1,
            2
          ],
          "target": 0
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            4,
            5,
            6,
            7,
            0,
            1,
            2
          ],
          "target": 3
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "target": 0
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "target": 1
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            5,
            1,
            3
          ],
          "target": 5
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            5,
            1,
            3
          ],
          "target": 3
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            6,
            7,
            8,
            1,
            2,
            3,
            4,
            5
          ],
          "target": 2
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            6,
            7,
            8,
            1,
            2,
            3,
            4,
            5
          ],
          "target": 9
        },
        "outputs": -1
      },
      {
        "inputs": {
          "nums": [
            1,
            3
          ],
          "target": 3
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            3,
            1
          ],
          "target": 1
        },
        "outputs": 1
      }
    ],
    "target_func": "search_rotated"
  },
  {
    "title": "Combination Sum",
    "prompt": "Implement combination_sum(candidates, target) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def combination_sum(candidates, target):\n    # TODO: implement\n    pass\n",
      "javascript": "function combination_sum(candidates, target) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "candidates": [
            2,
            3,
            6,
            7
          ],
          "target": 7
        },
        "outputs": [
          [
            2,
            2,
            3
          ],
          [
            7
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            2,
            3,
            5
          ],
          "target": 8
        },
        "outputs": [
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            3,
            3
          ],
          [
            3,
            5
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            2
          ],
          "target": 1
        },
        "outputs": []
      },
      {
        "inputs": {
          "candidates": [
            8,
            7,
            4,
            3
          ],
          "target": 11
        },
        "outputs": [
          [
            3,
            4,
            4
          ],
          [
            3,
            8
          ],
          [
            4,
            7
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            2,
            3,
            5,
            7
          ],
          "target": 7
        },
        "outputs": [
          [
            2,
            2,
            3
          ],
          [
            2,
            5
          ],
          [
            7
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            2,
            3,
            5
          ],
          "target": 7
        },
        "outputs": [
          [
            2,
            2,
            3
          ],
          [
            2,
            5
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            5,
            10,
            12,
            13,
            15,
            18
          ],
          "target": 30
        },
        "outputs": [
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            10
          ],
          [
            5,
            5,
            5,
            15
          ],
          [
            5,
            5,
            10,
            10
          ],
          [
            5,
            10,
            15
          ],
          [
            5,
            12,
            13
          ],
          [
            10,
            10,
            10
          ],
          [
            12,
            18
          ],
          [
            15,
            15
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            1
          ],
          "target": 2
        },
        "outputs": [
          [
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            9,
            3,
            4,
            7
          ],
          "target": 12
        },
        "outputs": [
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            9
          ],
          [
            4,
            4,
            4
          ]
        ]
      },
      {
        "inputs": {
          "candidates": [
            2,
            4,
            6,
            8
          ],
          "target": 8
        },
        "outputs": [
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            4
          ],
          [
            2,
            6
          ],
          [
            4,
            4
          ],
          [
            8
          ]
        ]
      }
    ],
    "target_func": "combination_sum"
  },
  {
    "title": "Permutations",
    "prompt": "Implement permute(nums) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def permute(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function permute(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            2,
            3
          ]
        },
        "outputs": [
          [
            1,
            2,
            3
          ],
          [
            1,
            3,
            2
          ],
          [
            2,
            1,
            3
          ],
          [
            2,
            3,
            1
          ],
          [
            3,
            1,
            2
          ],
          [
            3,
            2,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            1
          ]
        },
        "outputs": [
          [
            0,
            1
          ],
          [
            1,
            0
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            1
          ]
        },
        "outputs": [
          [
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            2
          ]
        },
        "outputs": [
          [
            1,
            1,
            2
          ],
          [
            1,
            2,
            1
          ],
          [
            2,
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2
          ]
        },
        "outputs": [
          [
            2,
            2,
            2
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            3,
            4
          ]
        },
        "outputs": [
          [
            3,
            4
          ],
          [
            4,
            3
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            1
          ]
        },
        "outputs": [
          [
            0,
            0,
            1
          ],
          [
            0,
            1,
            0
          ],
          [
            1,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2
          ]
        },
        "outputs": [
          [
            1,
            2
          ],
          [
            2,
            1
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            5,
            6,
            7
          ]
        },
        "outputs": [
          [
            5,
            6,
            7
          ],
          [
            5,
            7,
            6
          ],
          [
            6,
            5,
            7
          ],
          [
            6,
            7,
            5
          ],
          [
            7,
            5,
            6
          ],
          [
            7,
            6,
            5
          ]
        ]
      },
      {
        "inputs": {
          "nums": [
            9
          ]
        },
        "outputs": [
          [
            9
          ]
        ]
      }
    ],
    "target_func": "permute"
  },
  {
    "title": "Rotate Image",
    "prompt": "Implement rotate_image(matrix) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def rotate_image(matrix):\n    # TODO: implement\n    pass\n",
      "javascript": "function rotate_image(matrix) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              7,
              8,
              9
            ]
          ]
        },
        "outputs": [
          [
            7,
            4,
            1
          ],
          [
            8,
            5,
            2
          ],
          [
            9,
            6,
            3
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              5,
              1,
              9,
              11
            ],
            [
              2,
              4,
              8,
              10
            ],
            [
              13,
              3,
              6,
              7
            ],
            [
              15,
              14,
              12,
              16
            ]
          ]
        },
        "outputs": [
          [
            15,
            13,
            2,
            5
          ],
          [
            14,
            3,
            4,
            1
          ],
          [
            12,
            6,
            8,
            9
          ],
          [
            16,
            7,
            10,
            11
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ]
          ]
        },
        "outputs": [
          [
            1
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2
            ],
            [
              3,
              4
            ]
          ]
        },
        "outputs": [
          [
            3,
            1
          ],
          [
            4,
            2
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3,
              4
            ],
            [
              5,
              6,
              7,
              8
            ],
            [
              9,
              10,
              11,
              12
            ],
            [
              13,
              14,
              15,
              16
            ]
          ]
        },
        "outputs": [
          [
            13,
            9,
            5,
            1
          ],
          [
            14,
            10,
            6,
            2
          ],
          [
            15,
            11,
            7,
            3
          ],
          [
            16,
            12,
            8,
            4
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ]
          ]
        },
        "outputs": [
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              0,
              0
            ],
            [
              0,
              1,
              0
            ],
            [
              0,
              0,
              1
            ]
          ]
        },
        "outputs": [
          [
            0,
            0,
            1
          ],
          [
            0,
            1,
            0
          ],
          [
            1,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              2,
              2
            ],
            [
              2,
              2
            ]
          ]
        },
        "outputs": [
          [
            2,
            2
          ],
          [
            2,
            2
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              3,
              4,
              5
            ],
            [
              6,
              7,
              8
            ],
            [
              9,
              10,
              11
            ]
          ]
        },
        "outputs": [
          [
            9,
            6,
            3
          ],
          [
            10,
            7,
            4
          ],
          [
            11,
            8,
            5
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              -1,
              -2
            ],
            [
              -3,
              -4
            ]
          ]
        },
        "outputs": [
          [
            -3,
            -1
          ],
          [
            -4,
            -2
          ]
        ]
      }
    ],
    "target_func": "rotate_image"
  },
  {
    "title": "Group Anagrams",
    "prompt": "Implement group_anagrams(strs) -> list[list[str]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def group_anagrams(strs):\n    # TODO: implement\n    pass\n",
      "javascript": "function group_anagrams(strs) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "strs": [
            "eat",
            "tea",
            "tan",
            "ate",
            "nat",
            "bat"
          ]
        },
        "outputs": [
          [
            "ate",
            "eat",
            "tea"
          ],
          [
            "bat"
          ],
          [
            "nat",
            "tan"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            ""
          ]
        },
        "outputs": [
          [
            ""
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "a"
          ]
        },
        "outputs": [
          [
            "a"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "ab",
            "ba",
            "abc",
            "bca",
            "cab",
            "bbb"
          ]
        },
        "outputs": [
          [
            "ab",
            "ba"
          ],
          [
            "abc",
            "bca",
            "cab"
          ],
          [
            "bbb"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "dddd",
            "dd",
            "d",
            ""
          ]
        },
        "outputs": [
          [
            ""
          ],
          [
            "d"
          ],
          [
            "dd"
          ],
          [
            "dddd"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "bbb",
            "b",
            "bb",
            "bbb"
          ]
        },
        "outputs": [
          [
            "b"
          ],
          [
            "bb"
          ],
          [
            "bbb",
            "bbb"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "listen",
            "silent",
            "enlist",
            "google",
            "glegoo"
          ]
        },
        "outputs": [
          [
            "enlist",
            "listen",
            "silent"
          ],
          [
            "glegoo",
            "google"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "abc",
            "acb",
            "bac",
            "bca",
            "cab",
            "cba"
          ]
        },
        "outputs": [
          [
            "abc",
            "acb",
            "bac",
            "bca",
            "cab",
            "cba"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "x",
            "y",
            "z",
            "x"
          ]
        },
        "outputs": [
          [
            "x",
            "x"
          ],
          [
            "y"
          ],
          [
            "z"
          ]
        ]
      },
      {
        "inputs": {
          "strs": [
            "rat",
            "tar",
            "art",
            "car"
          ]
        },
        "outputs": [
          [
            "art",
            "rat",
            "tar"
          ],
          [
            "car"
          ]
        ]
      }
    ],
    "target_func": "group_anagrams"
  },
  {
    "title": "Product of Array Except Self",
    "prompt": "Implement product_except_self(nums) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def product_except_self(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function product_except_self(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4
          ]
        },
        "outputs": [
          24,
          12,
          8,
          6
        ]
      },
      {
        "inputs": {
          "nums": [
            -1,
            1,
            0,
            -3,
            3
          ]
        },
        "outputs": [
          0,
          0,
          9,
          0,
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            3,
            4,
            5
          ]
        },
        "outputs": [
          60,
          40,
          30,
          24
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            0
          ]
        },
        "outputs": [
          0,
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            4,
            0
          ]
        },
        "outputs": [
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            9,
            0,
            2,
            5,
            3
          ]
        },
        "outputs": [
          0,
          270,
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1
          ]
        },
        "outputs": [
          1,
          1,
          1,
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            -2,
            -1,
            -3,
            -4
          ]
        },
        "outputs": [
          -12,
          -24,
          -8,
          -6
        ]
      },
      {
        "inputs": {
          "nums": [
            5
          ]
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            10,
            3,
            5,
            6,
            2
          ]
        },
        "outputs": [
          180,
          600,
          360,
          300,
          900
        ]
      }
    ],
    "target_func": "product_except_self"
  },
  {
    "title": "Top K Frequent Elements",
    "prompt": "Implement top_k_frequent(nums, k) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def top_k_frequent(nums, k):\n    # TODO: implement\n    pass\n",
      "javascript": "function top_k_frequent(nums, k) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            2,
            2,
            3
          ],
          "k": 2
        },
        "outputs": [
          1,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "k": 1
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            4,
            1,
            -1,
            2,
            -1,
            2,
            3
          ],
          "k": 2
        },
        "outputs": [
          -1,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            5,
            5,
            5,
            4,
            4,
            3,
            3,
            3,
            2,
            1
          ],
          "k": 3
        },
        "outputs": [
          3,
          5,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            0,
            0
          ],
          "k": 1
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "k": 4
        },
        "outputs": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            7,
            7,
            7,
            7,
            7,
            8,
            8,
            9,
            9,
            9,
            9
          ],
          "k": 2
        },
        "outputs": [
          7,
          9
        ]
      },
      {
        "inputs": {
          "nums": [
            3,
            0,
            1,
            0
          ],
          "k": 1
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            10,
            10,
            10,
            9,
            9,
            8
          ],
          "k": 1
        },
        "outputs": [
          10
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            3,
            2,
            3,
            2,
            3,
            4
          ],
          "k": 2
        },
        "outputs": [
          2,
          3
        ]
      }
    ],
    "target_func": "top_k_frequent"
  },
  {
    "title": "Word Break",
    "prompt": "Implement word_break(s, wordDict) -> bool.",
    "difficulty": 2,
    "initial_code": {
      "python": "def word_break(s, wordDict):\n    # TODO: implement\n    pass\n",
      "javascript": "function word_break(s, wordDict) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "leetcode",
          "wordDict": [
            "leet",
            "code"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "applepenapple",
          "wordDict": [
            "apple",
            "pen"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "catsandog",
          "wordDict": [
            "cats",
            "dog",
            "sand",
            "and",
            "cat"
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "cars",
          "wordDict": [
            "car",
            "ca",
            "rs"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "aaaaaaa",
          "wordDict": [
            "aaaa",
            "aaa"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "aaaaaaa",
          "wordDict": [
            "aaaa",
            "aa"
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "bb",
          "wordDict": [
            "a",
            "b",
            "bbb",
            "bbbb"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "goalspecial",
          "wordDict": [
            "go",
            "goal",
            "goals",
            "special"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "",
          "wordDict": [
            "a"
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "aaaaaaaaaaaaaaaaaaaaaaaaab",
          "wordDict": [
            "a",
            "aa",
            "aaa",
            "aaaa",
            "aaaaa"
          ]
        },
        "outputs": false
      }
    ],
    "target_func": "word_break"
  },
  {
    "title": "Number of Islands",
    "prompt": "Implement num_islands(grid) -> int. Grid cells are '1'/'0'.",
    "difficulty": 2,
    "initial_code": {
      "python": "def num_islands(grid):\n    # TODO: implement\n    pass\n",
      "javascript": "function num_islands(grid) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "grid": [
            [
              "1",
              "1",
              "1",
              "1",
              "0"
            ],
            [
              "1",
              "1",
              "0",
              "1",
              "0"
            ],
            [
              "1",
              "1",
              "0",
              "0",
              "0"
            ],
            [
              "0",
              "0",
              "0",
              "0",
              "0"
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "grid": [
            [
              "1",
              "1",
              "0",
              "0",
              "0"
            ],
            [
              "1",
              "1",
              "0",
              "0",
              "0"
            ],
            [
              "0",
              "0",
              "1",
              "0",
              "0"
            ],
            [
              "0",
              "0",
              "0",
              "1",
              "1"
            ]
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "grid": [
            [
              "1"
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "grid": [
            [
              "0"
            ]
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "grid": [
            [
              "1",
              "0"
            ],
            [
              "0",
              "1"
            ]
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "grid": [
            [
              "1",
              "0",
              "1"
            ],
            [
              "0",
              "1",
              "0"
            ],
            [
              "1",
              "0",
              "1"
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "grid": [
            [
              "1",
              "1",
              "1"
            ],
            [
              "0",
              "1",
              "0"
            ],
            [
              "1",
              "1",
              "1"
            ]
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "grid": [
            [
              "0",
              "0",
              "0"
            ],
            [
              "0",
              "0",
              "0"
            ]
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "grid": [
            [
              "1",
              "0",
              "1",
              "0",
              "0"
            ],
            [
              "1",
              "0",
              "1",
              "0",
              "1"
            ],
            [
              "1",
              "1",
              "1",
              "0",
              "1"
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "grid": [
            [
              "1",
              "0",
              "0",
              "1"
            ],
            [
              "0",
              "0",
              "0",
              "0"
            ],
            [
              "1",
              "0",
              "0",
              "1"
            ]
          ]
        },
        "outputs": 4
      }
    ],
    "target_func": "num_islands"
  },
  {
    "title": "Kth Largest Element in an Array",
    "prompt": "Implement find_kth_largest(nums, k) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def find_kth_largest(nums, k):\n    # TODO: implement\n    pass\n",
      "javascript": "function find_kth_largest(nums, k) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            3,
            2,
            1,
            5,
            6,
            4
          ],
          "k": 2
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            3,
            2,
            3,
            1,
            2,
            4,
            5,
            5,
            6
          ],
          "k": 4
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "k": 1
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            7,
            6,
            5,
            4,
            3,
            2,
            1
          ],
          "k": 3
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            99,
            99
          ],
          "k": 1
        },
        "outputs": 99
      },
      {
        "inputs": {
          "nums": [
            2,
            1
          ],
          "k": 2
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            5,
            2,
            4,
            1,
            3,
            6,
            0
          ],
          "k": 4
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            10,
            9,
            8,
            7
          ],
          "k": 1
        },
        "outputs": 10
      },
      {
        "inputs": {
          "nums": [
            10,
            9,
            8,
            7
          ],
          "k": 4
        },
        "outputs": 7
      },
      {
        "inputs": {
          "nums": [
            100,
            -1,
            5,
            3,
            3
          ],
          "k": 2
        },
        "outputs": 5
      }
    ],
    "target_func": "find_kth_largest"
  },
  {
    "title": "Course Schedule",
    "prompt": "Implement can_finish(numCourses, prerequisites) -> bool.",
    "difficulty": 2,
    "initial_code": {
      "python": "def can_finish(numCourses, prerequisites):\n    # TODO: implement\n    pass\n",
      "javascript": "function can_finish(numCourses, prerequisites) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "numCourses": 2,
          "prerequisites": [
            [
              1,
              0
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 2,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              0,
              1
            ]
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "numCourses": 3,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              1
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 3,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              0
            ],
            [
              2,
              1
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 4,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              1
            ],
            [
              3,
              2
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 4,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              0
            ],
            [
              3,
              1
            ],
            [
              3,
              2
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 1,
          "prerequisites": []
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 5,
          "prerequisites": [
            [
              1,
              4
            ],
            [
              2,
              4
            ],
            [
              3,
              1
            ],
            [
              3,
              2
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 5,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              0
            ],
            [
              3,
              1
            ],
            [
              3,
              2
            ],
            [
              4,
              3
            ]
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "numCourses": 3,
          "prerequisites": []
        },
        "outputs": true
      }
    ],
    "target_func": "can_finish"
  },
  {
    "title": "Coin Change",
    "prompt": "Implement coin_change(coins, amount) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def coin_change(coins, amount):\n    # TODO: implement\n    pass\n",
      "javascript": "function coin_change(coins, amount) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "coins": [
            1,
            2,
            5
          ],
          "amount": 11
        },
        "outputs": 3
      },
      {
        "inputs": {
          "coins": [
            2
          ],
          "amount": 3
        },
        "outputs": -1
      },
      {
        "inputs": {
          "coins": [
            1
          ],
          "amount": 0
        },
        "outputs": 0
      },
      {
        "inputs": {
          "coins": [
            1
          ],
          "amount": 2
        },
        "outputs": 2
      },
      {
        "inputs": {
          "coins": [
            2,
            5,
            10,
            1
          ],
          "amount": 27
        },
        "outputs": 4
      },
      {
        "inputs": {
          "coins": [
            186,
            419,
            83,
            408
          ],
          "amount": 6249
        },
        "outputs": 20
      },
      {
        "inputs": {
          "coins": [
            2
          ],
          "amount": 1
        },
        "outputs": -1
      },
      {
        "inputs": {
          "coins": [
            3,
            7
          ],
          "amount": 5
        },
        "outputs": -1
      },
      {
        "inputs": {
          "coins": [
            3,
            4,
            5
          ],
          "amount": 7
        },
        "outputs": 2
      },
      {
        "inputs": {
          "coins": [
            9,
            6,
            5,
            1
          ],
          "amount": 11
        },
        "outputs": 2
      }
    ],
    "target_func": "coin_change"
  },
  {
    "title": "Lowest Common Ancestor of BST (array form)",
    "prompt": "Implement lca_bst(values, p, q) -> int (value).",
    "difficulty": 2,
    "initial_code": {
      "python": "def lca_bst(values, p, q):\n    # TODO: implement\n    pass\n",
      "javascript": "function lca_bst(values, p, q) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "values": [
            6,
            2,
            8,
            0,
            4,
            7,
            9,
            null,
            null,
            3,
            5
          ],
          "p": 2,
          "q": 8
        },
        "outputs": 6
      },
      {
        "inputs": {
          "values": [
            6,
            2,
            8,
            0,
            4,
            7,
            9,
            null,
            null,
            3,
            5
          ],
          "p": 2,
          "q": 4
        },
        "outputs": 2
      },
      {
        "inputs": {
          "values": [
            2,
            1
          ],
          "p": 2,
          "q": 1
        },
        "outputs": 2
      },
      {
        "inputs": {
          "values": [
            5,
            3,
            7,
            2,
            4,
            6,
            8
          ],
          "p": 2,
          "q": 8
        },
        "outputs": 5
      },
      {
        "inputs": {
          "values": [
            5,
            3,
            7,
            2,
            4,
            6,
            8
          ],
          "p": 6,
          "q": 8
        },
        "outputs": 7
      },
      {
        "inputs": {
          "values": [
            5,
            3,
            7,
            2,
            4,
            6,
            8
          ],
          "p": 3,
          "q": 4
        },
        "outputs": 3
      },
      {
        "inputs": {
          "values": [
            3,
            1,
            4,
            null,
            2
          ],
          "p": 2,
          "q": 4
        },
        "outputs": 3
      },
      {
        "inputs": {
          "values": [
            3,
            1,
            4,
            null,
            2
          ],
          "p": 1,
          "q": 2
        },
        "outputs": 1
      },
      {
        "inputs": {
          "values": [
            6,
            2,
            8,
            null,
            null,
            7,
            9
          ],
          "p": 7,
          "q": 9
        },
        "outputs": 8
      },
      {
        "inputs": {
          "values": [
            6,
            2,
            8,
            null,
            null,
            7,
            9
          ],
          "p": 2,
          "q": 7
        },
        "outputs": 6
      }
    ],
    "target_func": "lca_bst"
  },
  {
    "title": "Remove Nth From End (array form)",
    "prompt": "Implement remove_nth_from_end(values, n) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def remove_nth_from_end(values, n):\n    # TODO: implement\n    pass\n",
      "javascript": "function remove_nth_from_end(values, n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "values": [
            1,
            2,
            3,
            4,
            5
          ],
          "n": 2
        },
        "outputs": [
          1,
          2,
          3,
          5
        ]
      },
      {
        "inputs": {
          "values": [
            1
          ],
          "n": 1
        },
        "outputs": []
      },
      {
        "inputs": {
          "values": [
            1,
            2
          ],
          "n": 1
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            2
          ],
          "n": 2
        },
        "outputs": [
          2
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            3
          ],
          "n": 3
        },
        "outputs": [
          2,
          3
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            3
          ],
          "n": 1
        },
        "outputs": [
          1,
          2
        ]
      },
      {
        "inputs": {
          "values": [
            5,
            6,
            7,
            8
          ],
          "n": 4
        },
        "outputs": [
          6,
          7,
          8
        ]
      },
      {
        "inputs": {
          "values": [
            5,
            6,
            7,
            8
          ],
          "n": 3
        },
        "outputs": [
          5,
          7,
          8
        ]
      },
      {
        "inputs": {
          "values": [
            9,
            9,
            9
          ],
          "n": 2
        },
        "outputs": [
          9,
          9
        ]
      },
      {
        "inputs": {
          "values": [
            0,
            1,
            2,
            3
          ],
          "n": 1
        },
        "outputs": [
          0,
          1,
          2
        ]
      }
    ],
    "target_func": "remove_nth_from_end"
  },
  {
    "title": "Search a 2D Matrix",
    "prompt": "Implement search_matrix(matrix, target) -> bool.",
    "difficulty": 2,
    "initial_code": {
      "python": "def search_matrix(matrix, target):\n    # TODO: implement\n    pass\n",
      "javascript": "function search_matrix(matrix, target) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "matrix": [
            [
              1,
              3,
              5,
              7
            ],
            [
              10,
              11,
              16,
              20
            ],
            [
              23,
              30,
              34,
              60
            ]
          ],
          "target": 3
        },
        "outputs": true
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              3,
              5,
              7
            ],
            [
              10,
              11,
              16,
              20
            ],
            [
              23,
              30,
              34,
              60
            ]
          ],
          "target": 13
        },
        "outputs": false
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ]
          ],
          "target": 1
        },
        "outputs": true
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ]
          ],
          "target": 2
        },
        "outputs": false
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              3
            ]
          ],
          "target": 3
        },
        "outputs": true
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              3
            ]
          ],
          "target": 2
        },
        "outputs": false
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ],
            [
              3
            ]
          ],
          "target": 3
        },
        "outputs": true
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ],
            [
              3
            ]
          ],
          "target": 2
        },
        "outputs": false
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ]
          ],
          "target": 2
        },
        "outputs": true
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ]
          ],
          "target": 4
        },
        "outputs": false
      }
    ],
    "target_func": "search_matrix"
  },
  {
    "title": "Unique Paths",
    "prompt": "Implement unique_paths(m, n) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def unique_paths(m, n):\n    # TODO: implement\n    pass\n",
      "javascript": "function unique_paths(m, n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "m": 3,
          "n": 7
        },
        "outputs": 28
      },
      {
        "inputs": {
          "m": 3,
          "n": 2
        },
        "outputs": 3
      },
      {
        "inputs": {
          "m": 1,
          "n": 1
        },
        "outputs": 1
      },
      {
        "inputs": {
          "m": 1,
          "n": 5
        },
        "outputs": 1
      },
      {
        "inputs": {
          "m": 5,
          "n": 1
        },
        "outputs": 1
      },
      {
        "inputs": {
          "m": 7,
          "n": 3
        },
        "outputs": 28
      },
      {
        "inputs": {
          "m": 10,
          "n": 10
        },
        "outputs": 48620
      },
      {
        "inputs": {
          "m": 2,
          "n": 2
        },
        "outputs": 2
      },
      {
        "inputs": {
          "m": 3,
          "n": 3
        },
        "outputs": 6
      },
      {
        "inputs": {
          "m": 3,
          "n": 4
        },
        "outputs": 10
      }
    ],
    "target_func": "unique_paths"
  },
  {
    "title": "Decode Ways",
    "prompt": "Implement num_decodings(s) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def num_decodings(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function num_decodings(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "12"
        },
        "outputs": 2
      },
      {
        "inputs": {
          "s": "226"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "s": "06"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "2101"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "11106"
        },
        "outputs": 2
      },
      {
        "inputs": {
          "s": "10"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "27"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "101"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "100"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "2611055971756562"
        },
        "outputs": 4
      }
    ],
    "target_func": "num_decodings"
  },
  {
    "title": "House Robber",
    "prompt": "Implement rob(nums) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def rob(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function rob(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            1
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            2,
            7,
            9,
            3,
            1
          ]
        },
        "outputs": 12
      },
      {
        "inputs": {
          "nums": []
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            2,
            1,
            1,
            2
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            1
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            2,
            1
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            2,
            1,
            1,
            2,
            3,
            1
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "nums": [
            10,
            1,
            1,
            10
          ]
        },
        "outputs": 20
      },
      {
        "inputs": {
          "nums": [
            2,
            4,
            8,
            9,
            9,
            3
          ]
        },
        "outputs": 19
      },
      {
        "inputs": {
          "nums": [
            5,
            3,
            4,
            11,
            2
          ]
        },
        "outputs": 16
      }
    ],
    "target_func": "rob"
  },
  {
    "title": "Sort Colors",
    "prompt": "Implement sort_colors(nums) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def sort_colors(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function sort_colors(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            2,
            0,
            2,
            1,
            1,
            0
          ]
        },
        "outputs": [
          0,
          0,
          1,
          1,
          2,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            0,
            1
          ]
        },
        "outputs": [
          0,
          1,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            2,
            1,
            2,
            0,
            1
          ]
        },
        "outputs": [
          0,
          0,
          1,
          1,
          2,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            0
          ]
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            2
          ]
        },
        "outputs": [
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1
          ]
        },
        "outputs": [
          1,
          1,
          1,
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            2,
            2,
            1,
            1
          ]
        },
        "outputs": [
          0,
          0,
          1,
          1,
          2,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2
          ]
        },
        "outputs": [
          2,
          2,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            1,
            2,
            0,
            1,
            2
          ]
        },
        "outputs": [
          0,
          0,
          1,
          1,
          2,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            0,
            2,
            1,
            0,
            2
          ]
        },
        "outputs": [
          0,
          0,
          1,
          1,
          2,
          2
        ]
      }
    ],
    "target_func": "sort_colors"
  },
  {
    "title": "Course Schedule II",
    "prompt": "Implement find_order(numCourses, prerequisites) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def find_order(numCourses, prerequisites):\n    # TODO: implement\n    pass\n",
      "javascript": "function find_order(numCourses, prerequisites) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "numCourses": 2,
          "prerequisites": [
            [
              1,
              0
            ]
          ]
        },
        "outputs": [
          0,
          1
        ]
      },
      {
        "inputs": {
          "numCourses": 4,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              0
            ],
            [
              3,
              1
            ],
            [
              3,
              2
            ]
          ]
        },
        "outputs": [
          0,
          1,
          2,
          3
        ]
      },
      {
        "inputs": {
          "numCourses": 1,
          "prerequisites": []
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "numCourses": 3,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              1,
              2
            ],
            [
              0,
              1
            ]
          ]
        },
        "outputs": []
      },
      {
        "inputs": {
          "numCourses": 3,
          "prerequisites": []
        },
        "outputs": [
          0,
          1,
          2
        ]
      },
      {
        "inputs": {
          "numCourses": 5,
          "prerequisites": [
            [
              1,
              4
            ],
            [
              2,
              4
            ],
            [
              3,
              1
            ],
            [
              3,
              2
            ]
          ]
        },
        "outputs": [
          0,
          4,
          1,
          2,
          3
        ]
      },
      {
        "inputs": {
          "numCourses": 2,
          "prerequisites": [
            [
              0,
              1
            ]
          ]
        },
        "outputs": []
      },
      {
        "inputs": {
          "numCourses": 2,
          "prerequisites": []
        },
        "outputs": [
          0,
          1
        ]
      },
      {
        "inputs": {
          "numCourses": 4,
          "prerequisites": [
            [
              0,
              1
            ],
            [
              1,
              2
            ],
            [
              2,
              3
            ]
          ]
        },
        "outputs": [
          3,
          2,
          1,
          0
        ]
      },
      {
        "inputs": {
          "numCourses": 4,
          "prerequisites": [
            [
              1,
              0
            ],
            [
              2,
              0
            ],
            [
              3,
              1
            ],
            [
              3,
              2
            ]
          ]
        },
        "outputs": [
          0,
          1,
          2,
          3
        ]
      }
    ],
    "target_func": "find_order"
  },
  {
    "title": "Daily Temperatures",
    "prompt": "Implement daily_temperatures(temps) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def daily_temperatures(temps):\n    # TODO: implement\n    pass\n",
      "javascript": "function daily_temperatures(temps) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "temps": [
            73,
            74,
            75,
            71,
            69,
            72,
            76,
            73
          ]
        },
        "outputs": [
          1,
          1,
          4,
          2,
          1,
          1,
          0,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            30,
            40,
            50,
            60
          ]
        },
        "outputs": [
          1,
          1,
          1,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            30,
            60,
            90
          ]
        },
        "outputs": [
          1,
          1,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            90,
            80,
            70,
            60
          ]
        },
        "outputs": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            50,
            50,
            50
          ]
        },
        "outputs": [
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            60,
            50,
            60,
            50,
            60
          ]
        },
        "outputs": [
          0,
          1,
          0,
          1,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            55
          ]
        },
        "outputs": [
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            55,
            54,
            53,
            52,
            51,
            60
          ]
        },
        "outputs": [
          5,
          4,
          3,
          2,
          1,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            70,
            71,
            70,
            71,
            70,
            71
          ]
        },
        "outputs": [
          1,
          0,
          1,
          0,
          1,
          0
        ]
      },
      {
        "inputs": {
          "temps": [
            80,
            70,
            60,
            70,
            80,
            90
          ]
        },
        "outputs": [
          5,
          3,
          1,
          1,
          1,
          0
        ]
      }
    ],
    "target_func": "daily_temperatures"
  },
  {
    "title": "Minimum Path Sum",
    "prompt": "Implement min_path_sum(grid) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def min_path_sum(grid):\n    # TODO: implement\n    pass\n",
      "javascript": "function min_path_sum(grid) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "grid": [
            [
              1,
              3,
              1
            ],
            [
              1,
              5,
              1
            ],
            [
              4,
              2,
              1
            ]
          ]
        },
        "outputs": 7
      },
      {
        "inputs": {
          "grid": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ]
          ]
        },
        "outputs": 12
      },
      {
        "inputs": {
          "grid": [
            [
              5
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "grid": [
            [
              1,
              1,
              1
            ],
            [
              1,
              1,
              1
            ],
            [
              1,
              1,
              1
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "grid": [
            [
              1,
              99,
              1
            ],
            [
              1,
              1,
              1
            ],
            [
              1,
              1,
              1
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "grid": [
            [
              9,
              1,
              1
            ],
            [
              1,
              1,
              1
            ],
            [
              1,
              1,
              9
            ]
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "grid": [
            [
              1,
              2
            ],
            [
              1,
              1
            ]
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "grid": [
            [
              7,
              4,
              2
            ],
            [
              0,
              5,
              6
            ],
            [
              3,
              4,
              5
            ]
          ]
        },
        "outputs": 18
      },
      {
        "inputs": {
          "grid": [
            [
              2,
              2,
              1
            ],
            [
              3,
              2,
              2
            ],
            [
              1,
              1,
              1
            ]
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "grid": [
            [
              1,
              2,
              5
            ],
            [
              3,
              2,
              1
            ]
          ]
        },
        "outputs": 6
      }
    ],
    "target_func": "min_path_sum"
  },
  {
    "title": "Subarray Sum Equals K",
    "prompt": "Implement subarray_sum(nums, k) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def subarray_sum(nums, k):\n    # TODO: implement\n    pass\n",
      "javascript": "function subarray_sum(nums, k) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            1,
            1
          ],
          "k": 2
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3
          ],
          "k": 3
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            1,
            -1,
            0
          ],
          "k": 0
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            3,
            4,
            7,
            2,
            -3,
            1,
            4,
            2
          ],
          "k": 7
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            0,
            0
          ],
          "k": 0
        },
        "outputs": 10
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            1,
            2,
            1
          ],
          "k": 3
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            -1,
            -1,
            1
          ],
          "k": 0
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            2,
            -1,
            2
          ],
          "k": 3
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            10,
            2,
            -2,
            -20,
            10
          ],
          "k": -10
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "k": 0
        },
        "outputs": 0
      }
    ],
    "target_func": "subarray_sum"
  },
  {
    "title": "K Closest Points to Origin",
    "prompt": "Implement k_closest(points, k) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def k_closest(points, k):\n    # TODO: implement\n    pass\n",
      "javascript": "function k_closest(points, k) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "points": [
            [
              1,
              3
            ],
            [
              -2,
              2
            ]
          ],
          "k": 1
        },
        "outputs": [
          [
            -2,
            2
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              3,
              3
            ],
            [
              5,
              -1
            ],
            [
              -2,
              4
            ]
          ],
          "k": 2
        },
        "outputs": [
          [
            3,
            3
          ],
          [
            -2,
            4
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              0,
              1
            ],
            [
              1,
              0
            ]
          ],
          "k": 1
        },
        "outputs": [
          [
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              2,
              2
            ],
            [
              2,
              -2
            ],
            [
              -2,
              2
            ],
            [
              -2,
              -2
            ]
          ],
          "k": 3
        },
        "outputs": [
          [
            2,
            2
          ],
          [
            2,
            -2
          ],
          [
            -2,
            2
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              1,
              2
            ],
            [
              2,
              1
            ],
            [
              1,
              -2
            ],
            [
              -2,
              1
            ]
          ],
          "k": 2
        },
        "outputs": [
          [
            1,
            2
          ],
          [
            2,
            1
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              0,
              0
            ]
          ],
          "k": 1
        },
        "outputs": [
          [
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              1,
              4
            ],
            [
              2,
              3
            ],
            [
              3,
              2
            ],
            [
              4,
              1
            ]
          ],
          "k": 2
        },
        "outputs": [
          [
            2,
            3
          ],
          [
            3,
            2
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              5,
              5
            ],
            [
              1,
              1
            ],
            [
              2,
              2
            ],
            [
              3,
              3
            ]
          ],
          "k": 1
        },
        "outputs": [
          [
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              7,
              7
            ],
            [
              0,
              0
            ],
            [
              3,
              4
            ],
            [
              6,
              8
            ]
          ],
          "k": 2
        },
        "outputs": [
          [
            0,
            0
          ],
          [
            3,
            4
          ]
        ]
      },
      {
        "inputs": {
          "points": [
            [
              1,
              0
            ],
            [
              0,
              1
            ],
            [
              0,
              2
            ],
            [
              2,
              0
            ]
          ],
          "k": 3
        },
        "outputs": [
          [
            1,
            0
          ],
          [
            0,
            1
          ],
          [
            0,
            2
          ]
        ]
      }
    ],
    "target_func": "k_closest"
  },
  {
    "title": "Binary Tree Level Order Traversal (array form)",
    "prompt": "Implement level_order(values) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def level_order(values):\n    # TODO: implement\n    pass\n",
      "javascript": "function level_order(values) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "values": [
            3,
            9,
            20,
            null,
            null,
            15,
            7
          ]
        },
        "outputs": [
          [
            3
          ],
          [
            9,
            20
          ],
          [
            15,
            7
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            1
          ]
        },
        "outputs": [
          [
            1
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ]
        },
        "outputs": [
          [
            1
          ],
          [
            2,
            3
          ],
          [
            4,
            5,
            6,
            7
          ]
        ]
      },
      {
        "inputs": {
          "values": []
        },
        "outputs": []
      },
      {
        "inputs": {
          "values": [
            1,
            null,
            2,
            3
          ]
        },
        "outputs": [
          [
            1
          ],
          [
            2
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            2,
            null,
            3,
            4
          ]
        },
        "outputs": [
          [
            1
          ],
          [
            2
          ],
          [
            3,
            4
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            1,
            null,
            2,
            null,
            3,
            null,
            4
          ]
        },
        "outputs": [
          [
            1
          ],
          [
            2
          ],
          [
            4
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            5,
            3,
            8,
            1,
            4,
            7,
            9
          ]
        },
        "outputs": [
          [
            5
          ],
          [
            3,
            8
          ],
          [
            1,
            4,
            7,
            9
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            2,
            1,
            3
          ]
        },
        "outputs": [
          [
            2
          ],
          [
            1,
            3
          ]
        ]
      },
      {
        "inputs": {
          "values": [
            10,
            5,
            15,
            null,
            null,
            12,
            20
          ]
        },
        "outputs": [
          [
            10
          ],
          [
            5,
            15
          ],
          [
            12,
            20
          ]
        ]
      }
    ],
    "target_func": "level_order"
  },
  {
    "title": "Spiral Matrix",
    "prompt": "Implement spiral_order(matrix) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def spiral_order(matrix):\n    # TODO: implement\n    pass\n",
      "javascript": "function spiral_order(matrix) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              7,
              8,
              9
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          6,
          9,
          8,
          7,
          4,
          5
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3,
              4
            ],
            [
              5,
              6,
              7,
              8
            ],
            [
              9,
              10,
              11,
              12
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4,
          8,
          12,
          11,
          10,
          9,
          5,
          6,
          7
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ]
          ]
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2
            ],
            [
              3,
              4
            ]
          ]
        },
        "outputs": [
          1,
          2,
          4,
          3
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          6,
          5,
          4
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              7,
              8,
              9,
              10
            ]
          ]
        },
        "outputs": [
          7,
          8,
          9,
          10
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ],
            [
              2
            ],
            [
              3
            ],
            [
              4
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3,
              4
            ],
            [
              5,
              6,
              7,
              8
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4,
          8,
          7,
          6,
          5
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2
            ],
            [
              3,
              4
            ],
            [
              5,
              6
            ]
          ]
        },
        "outputs": [
          1,
          2,
          4,
          6,
          5,
          3
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ]
          ]
        },
        "outputs": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ],
    "target_func": "spiral_order"
  },
  {
    "title": "Set Matrix Zeroes",
    "prompt": "Implement set_zeroes(matrix) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def set_zeroes(matrix):\n    # TODO: implement\n    pass\n",
      "javascript": "function set_zeroes(matrix) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "matrix": [
            [
              1,
              1,
              1
            ],
            [
              1,
              0,
              1
            ],
            [
              1,
              1,
              1
            ]
          ]
        },
        "outputs": [
          [
            1,
            0,
            1
          ],
          [
            0,
            0,
            0
          ],
          [
            1,
            0,
            1
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              0,
              1,
              2,
              0
            ],
            [
              3,
              4,
              5,
              2
            ],
            [
              1,
              3,
              1,
              5
            ]
          ]
        },
        "outputs": [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            5,
            0
          ],
          [
            0,
            3,
            1,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ]
          ]
        },
        "outputs": [
          [
            1
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              0
            ]
          ]
        },
        "outputs": [
          [
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              7,
              8,
              9
            ]
          ]
        },
        "outputs": [
          [
            1,
            2,
            3
          ],
          [
            4,
            5,
            6
          ],
          [
            7,
            8,
            9
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              0
            ]
          ]
        },
        "outputs": [
          [
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              0,
              1
            ]
          ]
        },
        "outputs": [
          [
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              0
            ]
          ]
        },
        "outputs": [
          [
            0,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              0,
              0,
              0
            ],
            [
              1,
              1,
              1
            ],
            [
              2,
              2,
              2
            ]
          ]
        },
        "outputs": [
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ]
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2
            ],
            [
              0,
              3
            ]
          ]
        },
        "outputs": [
          [
            0,
            2
          ],
          [
            0,
            0
          ]
        ]
      }
    ],
    "target_func": "set_zeroes"
  },
  {
    "title": "Pow(x, n)",
    "prompt": "Implement my_pow(x, n) -> float.",
    "difficulty": 2,
    "initial_code": {
      "python": "def my_pow(x, n):\n    # TODO: implement\n    pass\n",
      "javascript": "function my_pow(x, n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "x": 2.0,
          "n": 10
        },
        "outputs": 1024.0
      },
      {
        "inputs": {
          "x": 2.1,
          "n": 3
        },
        "outputs": 9.261000000000001
      },
      {
        "inputs": {
          "x": 2.0,
          "n": -2
        },
        "outputs": 0.25
      },
      {
        "inputs": {
          "x": 1.0,
          "n": 2147483647
        },
        "outputs": 1.0
      },
      {
        "inputs": {
          "x": 0.5,
          "n": 5
        },
        "outputs": 0.03125
      },
      {
        "inputs": {
          "x": -2.0,
          "n": 3
        },
        "outputs": -8.0
      },
      {
        "inputs": {
          "x": -2.0,
          "n": 4
        },
        "outputs": 16.0
      },
      {
        "inputs": {
          "x": 2.0,
          "n": 0
        },
        "outputs": 1.0
      },
      {
        "inputs": {
          "x": 10.0,
          "n": 1
        },
        "outputs": 10.0
      },
      {
        "inputs": {
          "x": -1.0,
          "n": 999
        },
        "outputs": -1.0
      }
    ],
    "target_func": "my_pow"
  },
  {
    "title": "Multiply Strings",
    "prompt": "Implement multiply_strings(num1, num2) -> str.",
    "difficulty": 2,
    "initial_code": {
      "python": "def multiply_strings(num1, num2):\n    # TODO: implement\n    pass\n",
      "javascript": "function multiply_strings(num1, num2) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "num1": "2",
          "num2": "3"
        },
        "outputs": "6"
      },
      {
        "inputs": {
          "num1": "123",
          "num2": "456"
        },
        "outputs": "56088"
      },
      {
        "inputs": {
          "num1": "0",
          "num2": "0"
        },
        "outputs": "0"
      },
      {
        "inputs": {
          "num1": "9",
          "num2": "9"
        },
        "outputs": "81"
      },
      {
        "inputs": {
          "num1": "99",
          "num2": "99"
        },
        "outputs": "9801"
      },
      {
        "inputs": {
          "num1": "100",
          "num2": "1000"
        },
        "outputs": "100000"
      },
      {
        "inputs": {
          "num1": "12",
          "num2": "34"
        },
        "outputs": "408"
      },
      {
        "inputs": {
          "num1": "500",
          "num2": "20"
        },
        "outputs": "10000"
      },
      {
        "inputs": {
          "num1": "1",
          "num2": "99999"
        },
        "outputs": "99999"
      },
      {
        "inputs": {
          "num1": "321",
          "num2": "654"
        },
        "outputs": "209934"
      }
    ],
    "target_func": "multiply_strings"
  },
  {
    "title": "Integer to Roman",
    "prompt": "Implement int_to_roman(num) -> str.",
    "difficulty": 2,
    "initial_code": {
      "python": "def int_to_roman(num):\n    # TODO: implement\n    pass\n",
      "javascript": "function int_to_roman(num) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "num": 3
        },
        "outputs": "III"
      },
      {
        "inputs": {
          "num": 4
        },
        "outputs": "IV"
      },
      {
        "inputs": {
          "num": 9
        },
        "outputs": "IX"
      },
      {
        "inputs": {
          "num": 58
        },
        "outputs": "LVIII"
      },
      {
        "inputs": {
          "num": 1994
        },
        "outputs": "MCMXCIV"
      },
      {
        "inputs": {
          "num": 44
        },
        "outputs": "XLIV"
      },
      {
        "inputs": {
          "num": 3999
        },
        "outputs": "MMMCMXCIX"
      },
      {
        "inputs": {
          "num": 1
        },
        "outputs": "I"
      },
      {
        "inputs": {
          "num": 621
        },
        "outputs": "DCXXI"
      },
      {
        "inputs": {
          "num": 2421
        },
        "outputs": "MMCDXXI"
      }
    ],
    "target_func": "int_to_roman"
  },
  {
    "title": "Jump Game",
    "prompt": "Implement can_jump(nums) -> bool.",
    "difficulty": 2,
    "initial_code": {
      "python": "def can_jump(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function can_jump(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            2,
            3,
            1,
            1,
            4
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            3,
            2,
            1,
            0,
            4
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            0
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            2,
            0,
            0
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            2,
            5,
            0,
            0
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            0,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            2,
            0,
            2,
            0,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            4,
            0,
            0,
            0,
            0
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            0,
            1,
            0
          ]
        },
        "outputs": false
      }
    ],
    "target_func": "can_jump"
  },
  {
    "title": "Insert Interval",
    "prompt": "Implement insert_interval(intervals, newInterval) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def insert_interval(intervals, newInterval):\n    # TODO: implement\n    pass\n",
      "javascript": "function insert_interval(intervals, newInterval) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "intervals": [
            [
              1,
              3
            ],
            [
              6,
              9
            ]
          ],
          "newInterval": [
            2,
            5
          ]
        },
        "outputs": [
          [
            1,
            5
          ],
          [
            6,
            9
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              2
            ],
            [
              3,
              5
            ],
            [
              6,
              7
            ],
            [
              8,
              10
            ],
            [
              12,
              16
            ]
          ],
          "newInterval": [
            4,
            8
          ]
        },
        "outputs": [
          [
            1,
            2
          ],
          [
            3,
            10
          ],
          [
            12,
            16
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [],
          "newInterval": [
            5,
            7
          ]
        },
        "outputs": [
          [
            5,
            7
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              5
            ]
          ],
          "newInterval": [
            2,
            3
          ]
        },
        "outputs": [
          [
            1,
            5
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              5
            ]
          ],
          "newInterval": [
            2,
            7
          ]
        },
        "outputs": [
          [
            1,
            7
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              2
            ],
            [
              3,
              4
            ]
          ],
          "newInterval": [
            5,
            6
          ]
        },
        "outputs": [
          [
            1,
            2
          ],
          [
            3,
            4
          ],
          [
            5,
            6
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              5
            ],
            [
              6,
              8
            ]
          ],
          "newInterval": [
            0,
            9
          ]
        },
        "outputs": [
          [
            0,
            9
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              3
            ]
          ],
          "newInterval": [
            0,
            0
          ]
        },
        "outputs": [
          [
            0,
            0
          ],
          [
            1,
            3
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              0,
              0
            ]
          ],
          "newInterval": [
            1,
            1
          ]
        },
        "outputs": [
          [
            0,
            0
          ],
          [
            1,
            1
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              5
            ]
          ],
          "newInterval": [
            6,
            6
          ]
        },
        "outputs": [
          [
            1,
            5
          ],
          [
            6,
            6
          ]
        ]
      }
    ],
    "target_func": "insert_interval"
  },
  {
    "title": "Merge Intervals",
    "prompt": "Implement merge_intervals(intervals) -> list[list[int]].",
    "difficulty": 2,
    "initial_code": {
      "python": "def merge_intervals(intervals):\n    # TODO: implement\n    pass\n",
      "javascript": "function merge_intervals(intervals) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "intervals": [
            [
              1,
              3
            ],
            [
              2,
              6
            ],
            [
              8,
              10
            ],
            [
              15,
              18
            ]
          ]
        },
        "outputs": [
          [
            1,
            6
          ],
          [
            8,
            10
          ],
          [
            15,
            18
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              4
            ],
            [
              4,
              5
            ]
          ]
        },
        "outputs": [
          [
            1,
            5
          ]
        ]
      },
      {
        "inputs": {
          "intervals": []
        },
        "outputs": []
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              4
            ],
            [
              0,
              4
            ]
          ]
        },
        "outputs": [
          [
            0,
            4
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              4
            ],
            [
              2,
              3
            ]
          ]
        },
        "outputs": [
          [
            1,
            4
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              3
            ],
            [
              5,
              7
            ]
          ]
        },
        "outputs": [
          [
            1,
            3
          ],
          [
            5,
            7
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              10
            ],
            [
              2,
              6
            ],
            [
              8,
              9
            ]
          ]
        },
        "outputs": [
          [
            1,
            10
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              6,
              8
            ],
            [
              1,
              9
            ],
            [
              2,
              4
            ],
            [
              4,
              7
            ]
          ]
        },
        "outputs": [
          [
            1,
            9
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              4
            ],
            [
              0,
              2
            ],
            [
              3,
              5
            ]
          ]
        },
        "outputs": [
          [
            0,
            5
          ]
        ]
      },
      {
        "inputs": {
          "intervals": [
            [
              1,
              4
            ],
            [
              0,
              0
            ]
          ]
        },
        "outputs": [
          [
            0,
            0
          ],
          [
            1,
            4
          ]
        ]
      }
    ],
    "target_func": "merge_intervals"
  },
  {
    "title": "Longest Increasing Subsequence",
    "prompt": "Implement length_of_LIS(nums) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def length_of_LIS(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function length_of_LIS(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            10,
            9,
            2,
            5,
            3,
            7,
            101,
            18
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            0,
            1,
            0,
            3,
            2,
            3
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            4,
            10,
            4,
            3,
            8,
            9
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            2,
            2
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            1,
            3,
            6,
            7,
            9,
            4,
            10,
            5,
            6
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "nums": [
            1
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            3,
            5,
            6,
            2,
            5,
            4,
            19,
            5,
            6,
            7,
            12
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "nums": [
            2,
            15,
            3,
            7,
            8,
            6,
            18
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            5,
            4,
            3,
            2,
            1
          ]
        },
        "outputs": 1
      }
    ],
    "target_func": "length_of_LIS"
  },
  {
    "title": "Partition Equal Subset Sum",
    "prompt": "Implement can_partition(nums) -> bool.",
    "difficulty": 2,
    "initial_code": {
      "python": "def can_partition(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function can_partition(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            5,
            11,
            5
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            5
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            3,
            5
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            3,
            3,
            3,
            4,
            5
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            1,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            100,
            100
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            5
          ]
        },
        "outputs": false
      },
      {
        "inputs": {
          "nums": [
            14,
            9,
            8,
            4,
            3,
            2
          ]
        },
        "outputs": true
      },
      {
        "inputs": {
          "nums": [
            23,
            13,
            11,
            7,
            6,
            5,
            5
          ]
        },
        "outputs": true
      }
    ],
    "target_func": "can_partition"
  },
  {
    "title": "Find Peak Element",
    "prompt": "Implement find_peak_element(nums) -> int (index).",
    "difficulty": 2,
    "initial_code": {
      "python": "def find_peak_element(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function find_peak_element(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            1
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            1,
            3,
            5,
            6,
            4
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            1
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            2,
            1
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            1,
            2
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            3,
            4,
            3,
            2,
            1
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            5,
            4,
            3,
            2,
            1
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            1,
            3,
            2,
            1,
            2,
            3,
            1,
            0
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            2,
            1,
            2,
            1,
            2,
            1
          ]
        },
        "outputs": 2
      }
    ],
    "target_func": "find_peak_element"
  },
  {
    "title": "Gas Station",
    "prompt": "Implement can_complete_circuit(gas, cost) -> int (starting index or -1).",
    "difficulty": 2,
    "initial_code": {
      "python": "def can_complete_circuit(gas, cost):\n    # TODO: implement\n    pass\n",
      "javascript": "function can_complete_circuit(gas, cost) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "gas": [
            1,
            2,
            3,
            4,
            5
          ],
          "cost": [
            3,
            4,
            5,
            1,
            2
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "gas": [
            2,
            3,
            4
          ],
          "cost": [
            3,
            4,
            3
          ]
        },
        "outputs": -1
      },
      {
        "inputs": {
          "gas": [
            5
          ],
          "cost": [
            4
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "gas": [
            2
          ],
          "cost": [
            2
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "gas": [
            3,
            3,
            4
          ],
          "cost": [
            3,
            4,
            4
          ]
        },
        "outputs": -1
      },
      {
        "inputs": {
          "gas": [
            6,
            1,
            4,
            3,
            5
          ],
          "cost": [
            3,
            8,
            2,
            4,
            2
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "gas": [
            1,
            2,
            3,
            4
          ],
          "cost": [
            2,
            3,
            4,
            5
          ]
        },
        "outputs": -1
      },
      {
        "inputs": {
          "gas": [
            5,
            5,
            5
          ],
          "cost": [
            4,
            4,
            4
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "gas": [
            1,
            2,
            3,
            4,
            5,
            5,
            70
          ],
          "cost": [
            2,
            3,
            4,
            3,
            9,
            6,
            2
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "gas": [
            10,
            2,
            3,
            4,
            5
          ],
          "cost": [
            1,
            10,
            1,
            1,
            1
          ]
        },
        "outputs": 0
      }
    ],
    "target_func": "can_complete_circuit"
  },
  {
    "title": "Word Search",
    "prompt": "Implement exist(board, word) -> bool.",
    "difficulty": 2,
    "initial_code": {
      "python": "def exist(board, word):\n    # TODO: implement\n    pass\n",
      "javascript": "function exist(board, word) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "board": [
            [
              "A",
              "B",
              "C",
              "E"
            ],
            [
              "S",
              "F",
              "C",
              "S"
            ],
            [
              "A",
              "D",
              "E",
              "E"
            ]
          ],
          "word": "ABCCED"
        },
        "outputs": true
      },
      {
        "inputs": {
          "board": [
            [
              "A",
              "B",
              "C",
              "E"
            ],
            [
              "S",
              "F",
              "C",
              "S"
            ],
            [
              "A",
              "D",
              "E",
              "E"
            ]
          ],
          "word": "SEE"
        },
        "outputs": true
      },
      {
        "inputs": {
          "board": [
            [
              "A",
              "B",
              "C",
              "E"
            ],
            [
              "S",
              "F",
              "C",
              "S"
            ],
            [
              "A",
              "D",
              "E",
              "E"
            ]
          ],
          "word": "ABCB"
        },
        "outputs": false
      },
      {
        "inputs": {
          "board": [
            [
              "A"
            ]
          ],
          "word": "A"
        },
        "outputs": true
      },
      {
        "inputs": {
          "board": [
            [
              "A"
            ]
          ],
          "word": "B"
        },
        "outputs": false
      },
      {
        "inputs": {
          "board": [
            [
              "C",
              "A",
              "A"
            ],
            [
              "A",
              "A",
              "A"
            ],
            [
              "B",
              "C",
              "D"
            ]
          ],
          "word": "AAB"
        },
        "outputs": true
      },
      {
        "inputs": {
          "board": [
            [
              "a",
              "a"
            ]
          ],
          "word": "aa"
        },
        "outputs": true
      },
      {
        "inputs": {
          "board": [
            [
              "a",
              "a",
              "a"
            ]
          ],
          "word": "aaaa"
        },
        "outputs": false
      },
      {
        "inputs": {
          "board": [
            [
              "A",
              "B",
              "C",
              "D"
            ],
            [
              "E",
              "F",
              "G",
              "H"
            ],
            [
              "I",
              "J",
              "K",
              "L"
            ]
          ],
          "word": "CFI"
        },
        "outputs": false
      },
      {
        "inputs": {
          "board": [
            [
              "X",
              "Y"
            ]
          ],
          "word": "XY"
        },
        "outputs": true
      }
    ],
    "target_func": "exist"
  },
  {
    "title": "Find First and Last Position in Sorted Array",
    "prompt": "Implement search_range(nums, target) -> list[int].",
    "difficulty": 2,
    "initial_code": {
      "python": "def search_range(nums, target):\n    # TODO: implement\n    pass\n",
      "javascript": "function search_range(nums, target) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            5,
            7,
            7,
            8,
            8,
            10
          ],
          "target": 8
        },
        "outputs": [
          3,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            5,
            7,
            7,
            8,
            8,
            10
          ],
          "target": 6
        },
        "outputs": [
          -1,
          -1
        ]
      },
      {
        "inputs": {
          "nums": [],
          "target": 0
        },
        "outputs": [
          -1,
          -1
        ]
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "target": 1
        },
        "outputs": [
          0,
          0
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1
          ],
          "target": 1
        },
        "outputs": [
          0,
          3
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            5
          ],
          "target": 3
        },
        "outputs": [
          2,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            5
          ],
          "target": 6
        },
        "outputs": [
          -1,
          -1
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2,
            3,
            3,
            4
          ],
          "target": 2
        },
        "outputs": [
          0,
          2
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2,
            3,
            3,
            4
          ],
          "target": 3
        },
        "outputs": [
          3,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2,
            3,
            3,
            4
          ],
          "target": 4
        },
        "outputs": [
          5,
          5
        ]
      }
    ],
    "target_func": "search_range"
  },
  {
    "title": "Evaluate Reverse Polish Notation",
    "prompt": "Implement eval_RPN(tokens) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def eval_RPN(tokens):\n    # TODO: implement\n    pass\n",
      "javascript": "function eval_RPN(tokens) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "tokens": [
            "2",
            "1",
            "+",
            "3",
            "*"
          ]
        },
        "outputs": 9
      },
      {
        "inputs": {
          "tokens": [
            "4",
            "13",
            "5",
            "/",
            "+"
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "tokens": [
            "10",
            "6",
            "9",
            "3",
            "+",
            "-11",
            "*",
            "/",
            "*",
            "17",
            "+",
            "5",
            "+"
          ]
        },
        "outputs": 22
      },
      {
        "inputs": {
          "tokens": [
            "3",
            "-4",
            "+"
          ]
        },
        "outputs": -1
      },
      {
        "inputs": {
          "tokens": [
            "-2",
            "3",
            "/"
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "tokens": [
            "5",
            "1",
            "2",
            "+",
            "4",
            "*",
            "+",
            "3",
            "-"
          ]
        },
        "outputs": 14
      },
      {
        "inputs": {
          "tokens": [
            "0",
            "3",
            "/"
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "tokens": [
            "7",
            "2",
            "/"
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "tokens": [
            "-7",
            "2",
            "/"
          ]
        },
        "outputs": -3
      },
      {
        "inputs": {
          "tokens": [
            "-7",
            "-2",
            "/"
          ]
        },
        "outputs": 3
      }
    ],
    "target_func": "eval_RPN"
  },
  {
    "title": "Basic Calculator II",
    "prompt": "Implement basic_calc2(s) -> int with +,-,*,/.",
    "difficulty": 2,
    "initial_code": {
      "python": "def basic_calc2(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function basic_calc2(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "3+2*2"
        },
        "outputs": 7
      },
      {
        "inputs": {
          "s": " 3/2 "
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": " 3+5 / 2 "
        },
        "outputs": 5
      },
      {
        "inputs": {
          "s": "14-3/2"
        },
        "outputs": 13
      },
      {
        "inputs": {
          "s": "100"
        },
        "outputs": 100
      },
      {
        "inputs": {
          "s": "1*2-3/4+5*6-7/8"
        },
        "outputs": 32
      },
      {
        "inputs": {
          "s": "+10-2*3"
        },
        "outputs": 4
      },
      {
        "inputs": {
          "s": "7/3+2"
        },
        "outputs": 4
      },
      {
        "inputs": {
          "s": "8+3*2-6/4"
        },
        "outputs": 13
      },
      {
        "inputs": {
          "s": "42"
        },
        "outputs": 42
      }
    ],
    "target_func": "basic_calc2"
  },
  {
    "title": "Word Ladder (length)",
    "prompt": "Implement ladder_length(beginWord, endWord, wordList) -> int.",
    "difficulty": 2,
    "initial_code": {
      "python": "def ladder_length(beginWord, endWord, wordList):\n    # TODO: implement\n    pass\n",
      "javascript": "function ladder_length(beginWord, endWord, wordList) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "beginWord": "hit",
          "endWord": "cog",
          "wordList": [
            "hot",
            "dot",
            "dog",
            "lot",
            "log",
            "cog"
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "beginWord": "hit",
          "endWord": "cog",
          "wordList": [
            "hot",
            "dot",
            "dog",
            "lot",
            "log"
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "beginWord": "a",
          "endWord": "c",
          "wordList": [
            "a",
            "b",
            "c"
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "beginWord": "lost",
          "endWord": "cost",
          "wordList": [
            "most",
            "fist",
            "lost",
            "cost",
            "fish"
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "beginWord": "red",
          "endWord": "tax",
          "wordList": [
            "ted",
            "tex",
            "red",
            "tax",
            "tad",
            "den",
            "rex",
            "pee"
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "beginWord": "toon",
          "endWord": "plea",
          "wordList": [
            "poon",
            "plee",
            "same",
            "poie",
            "plea",
            "plie",
            "poin"
          ]
        },
        "outputs": 7
      },
      {
        "inputs": {
          "beginWord": "hot",
          "endWord": "dog",
          "wordList": [
            "hot",
            "dog"
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "beginWord": "hot",
          "endWord": "dog",
          "wordList": [
            "hot",
            "dot",
            "dog"
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "beginWord": "game",
          "endWord": "thee",
          "wordList": [
            "fame",
            "faze",
            "gaze",
            "gave",
            "have",
            "haze",
            "thee",
            "tame",
            "taze",
            "tame"
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "beginWord": "aaaa",
          "endWord": "bbbb",
          "wordList": [
            "aaab",
            "aabb",
            "abbb",
            "bbbb"
          ]
        },
        "outputs": 5
      }
    ],
    "target_func": "ladder_length"
  },
  {
    "title": "Median of Two Sorted Arrays",
    "prompt": "Implement find_median_sorted_arrays(nums1, nums2) -> float.",
    "difficulty": 3,
    "initial_code": {
      "python": "def find_median_sorted_arrays(nums1, nums2):\n    # TODO: implement\n    pass\n",
      "javascript": "function find_median_sorted_arrays(nums1, nums2) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums1": [
            1,
            3
          ],
          "nums2": [
            2
          ]
        },
        "outputs": 2.0
      },
      {
        "inputs": {
          "nums1": [
            1,
            2
          ],
          "nums2": [
            3,
            4
          ]
        },
        "outputs": 2.5
      },
      {
        "inputs": {
          "nums1": [
            0,
            0
          ],
          "nums2": [
            0,
            0
          ]
        },
        "outputs": 0.0
      },
      {
        "inputs": {
          "nums1": [],
          "nums2": [
            1
          ]
        },
        "outputs": 1.0
      },
      {
        "inputs": {
          "nums1": [
            2
          ],
          "nums2": []
        },
        "outputs": 2.0
      },
      {
        "inputs": {
          "nums1": [
            1,
            3,
            5
          ],
          "nums2": [
            2,
            4,
            6
          ]
        },
        "outputs": 3.5
      },
      {
        "inputs": {
          "nums1": [
            1,
            1
          ],
          "nums2": [
            1,
            2,
            3
          ]
        },
        "outputs": 1.0
      },
      {
        "inputs": {
          "nums1": [
            -5,
            -3,
            -1
          ],
          "nums2": [
            -2,
            0,
            2
          ]
        },
        "outputs": -1.5
      },
      {
        "inputs": {
          "nums1": [
            1000
          ],
          "nums2": [
            1000,
            1001
          ]
        },
        "outputs": 1000.0
      },
      {
        "inputs": {
          "nums1": [
            1,
            2,
            3,
            4,
            5
          ],
          "nums2": [
            6,
            7,
            8,
            9,
            10
          ]
        },
        "outputs": 5.5
      }
    ],
    "target_func": "find_median_sorted_arrays"
  },
  {
    "title": "Merge k Sorted Lists (arrays)",
    "prompt": "Implement merge_k_sorted(lists) -> list[int]. Each list is sorted non-decreasing.",
    "difficulty": 3,
    "initial_code": {
      "python": "def merge_k_sorted(lists):\n    # TODO: implement\n    pass\n",
      "javascript": "function merge_k_sorted(lists) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "lists": [
            [
              1,
              4,
              5
            ],
            [
              1,
              3,
              4
            ],
            [
              2,
              6
            ]
          ]
        },
        "outputs": [
          1,
          1,
          2,
          3,
          4,
          4,
          5,
          6
        ]
      },
      {
        "inputs": {
          "lists": [
            []
          ]
        },
        "outputs": []
      },
      {
        "inputs": {
          "lists": [
            [],
            [
              1
            ],
            []
          ]
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              0,
              0,
              0
            ],
            [
              0
            ],
            [
              0,
              0
            ]
          ]
        },
        "outputs": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              1
            ],
            [
              2
            ],
            [
              3
            ],
            [
              4
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              1,
              1,
              1
            ],
            [
              1,
              1
            ],
            [
              1
            ]
          ]
        },
        "outputs": [
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              -3,
              -1,
              0
            ],
            [
              -2,
              2,
              3
            ]
          ]
        },
        "outputs": [
          -3,
          -2,
          -1,
          0,
          2,
          3
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              5,
              7,
              9
            ],
            [
              6,
              8,
              10
            ],
            [
              0,
              11
            ]
          ]
        },
        "outputs": [
          0,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              10
            ],
            []
          ]
        },
        "outputs": [
          10
        ]
      },
      {
        "inputs": {
          "lists": [
            [
              2,
              3,
              5
            ],
            [
              1,
              4,
              6,
              7,
              8
            ]
          ]
        },
        "outputs": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      }
    ],
    "target_func": "merge_k_sorted"
  },
  {
    "title": "Regular Expression Matching",
    "prompt": "Implement is_match(s, p) -> bool supporting '.' and '*' like LeetCode 10.",
    "difficulty": 3,
    "initial_code": {
      "python": "def is_match(s, p):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_match(s, p) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "aa",
          "p": "a"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "aa",
          "p": "a*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "ab",
          "p": ".*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "aab",
          "p": "c*a*b"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "mississippi",
          "p": "mis*is*p*."
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "",
          "p": ".*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "",
          "p": ""
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "abc",
          "p": "abc*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "aaa",
          "p": "ab*a*c*a"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "ab",
          "p": ".*c"
        },
        "outputs": false
      }
    ],
    "target_func": "is_match"
  },
  {
    "title": "First Missing Positive",
    "prompt": "Implement first_missing_positive(nums) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def first_missing_positive(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function first_missing_positive(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            2,
            0
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            3,
            4,
            -1,
            1
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            7,
            8,
            9,
            11,
            12
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            1,
            1
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "nums": [
            2
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            0
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            -1,
            -2,
            -3
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2,
            2
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            5,
            3,
            2,
            1
          ]
        },
        "outputs": 4
      }
    ],
    "target_func": "first_missing_positive"
  },
  {
    "title": "Trapping Rain Water",
    "prompt": "Implement trap(height) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def trap(height):\n    # TODO: implement\n    pass\n",
      "javascript": "function trap(height) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "height": [
            0,
            1,
            0,
            2,
            1,
            0,
            1,
            3,
            2,
            1,
            2,
            1
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "height": [
            4,
            2,
            0,
            3,
            2,
            5
          ]
        },
        "outputs": 9
      },
      {
        "inputs": {
          "height": [
            1,
            0,
            2,
            1,
            0,
            1,
            3,
            2,
            1,
            2,
            1
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "height": [
            2,
            0,
            2
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "height": [
            3,
            0,
            0,
            2,
            0,
            4
          ]
        },
        "outputs": 10
      },
      {
        "inputs": {
          "height": [
            0,
            0,
            0
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "height": [
            5,
            4,
            1,
            2
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "height": [
            2,
            1,
            0,
            2
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "height": [
            3,
            1,
            2,
            1,
            2,
            1,
            5
          ]
        },
        "outputs": 8
      },
      {
        "inputs": {
          "height": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": 0
      }
    ],
    "target_func": "trap"
  },
  {
    "title": "Edit Distance",
    "prompt": "Implement min_distance(word1, word2) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def min_distance(word1, word2):\n    # TODO: implement\n    pass\n",
      "javascript": "function min_distance(word1, word2) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "word1": "horse",
          "word2": "ros"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "word1": "intention",
          "word2": "execution"
        },
        "outputs": 5
      },
      {
        "inputs": {
          "word1": "",
          "word2": ""
        },
        "outputs": 0
      },
      {
        "inputs": {
          "word1": "a",
          "word2": ""
        },
        "outputs": 1
      },
      {
        "inputs": {
          "word1": "",
          "word2": "a"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "word1": "kitten",
          "word2": "sitting"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "word1": "algorithm",
          "word2": "altruistic"
        },
        "outputs": 6
      },
      {
        "inputs": {
          "word1": "park",
          "word2": "spake"
        },
        "outputs": 3
      },
      {
        "inputs": {
          "word1": "distance",
          "word2": "editing"
        },
        "outputs": 5
      },
      {
        "inputs": {
          "word1": "abc",
          "word2": "yabd"
        },
        "outputs": 2
      }
    ],
    "target_func": "min_distance"
  },
  {
    "title": "Sliding Window Maximum",
    "prompt": "Implement max_sliding_window(nums, k) -> list[int].",
    "difficulty": 3,
    "initial_code": {
      "python": "def max_sliding_window(nums, k):\n    # TODO: implement\n    pass\n",
      "javascript": "function max_sliding_window(nums, k) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            3,
            -1,
            -3,
            5,
            3,
            6,
            7
          ],
          "k": 3
        },
        "outputs": [
          3,
          3,
          5,
          5,
          6,
          7
        ]
      },
      {
        "inputs": {
          "nums": [
            1
          ],
          "k": 1
        },
        "outputs": [
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            9,
            11
          ],
          "k": 2
        },
        "outputs": [
          11
        ]
      },
      {
        "inputs": {
          "nums": [
            4,
            -2
          ],
          "k": 2
        },
        "outputs": [
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            7,
            2,
            4
          ],
          "k": 2
        },
        "outputs": [
          7,
          4
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            3,
            1,
            2,
            0,
            5
          ],
          "k": 3
        },
        "outputs": [
          3,
          3,
          2,
          5
        ]
      },
      {
        "inputs": {
          "nums": [
            10,
            9,
            8,
            7,
            6,
            5
          ],
          "k": 2
        },
        "outputs": [
          10,
          9,
          8,
          7,
          6
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "k": 3
        },
        "outputs": [
          3,
          4,
          5,
          6
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1
          ],
          "k": 2
        },
        "outputs": [
          1,
          1,
          1
        ]
      },
      {
        "inputs": {
          "nums": [
            5,
            3,
            4
          ],
          "k": 1
        },
        "outputs": [
          5,
          3,
          4
        ]
      }
    ],
    "target_func": "max_sliding_window"
  },
  {
    "title": "Minimum Window Substring",
    "prompt": "Implement min_window(s, t) -> str (any valid minimum window).",
    "difficulty": 3,
    "initial_code": {
      "python": "def min_window(s, t):\n    # TODO: implement\n    pass\n",
      "javascript": "function min_window(s, t) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "ADOBECODEBANC",
          "t": "ABC"
        },
        "outputs": "BANC"
      },
      {
        "inputs": {
          "s": "a",
          "t": "a"
        },
        "outputs": "a"
      },
      {
        "inputs": {
          "s": "a",
          "t": "aa"
        },
        "outputs": ""
      },
      {
        "inputs": {
          "s": "ab",
          "t": "b"
        },
        "outputs": "b"
      },
      {
        "inputs": {
          "s": "bba",
          "t": "ab"
        },
        "outputs": "ba"
      },
      {
        "inputs": {
          "s": "aa",
          "t": "aa"
        },
        "outputs": "aa"
      },
      {
        "inputs": {
          "s": "ab",
          "t": "a"
        },
        "outputs": "a"
      },
      {
        "inputs": {
          "s": "abcdef",
          "t": "xyz"
        },
        "outputs": ""
      },
      {
        "inputs": {
          "s": "aaabdabcefaecbef",
          "t": "abc"
        },
        "outputs": "abc"
      },
      {
        "inputs": {
          "s": "bdab",
          "t": "ab"
        },
        "outputs": "ab"
      }
    ],
    "target_func": "min_window"
  },
  {
    "title": "N-Queens II (count)",
    "prompt": "Implement total_n_queens(n) -> int, counting the number of solutions.",
    "difficulty": 3,
    "initial_code": {
      "python": "def total_n_queens(n):\n    # TODO: implement\n    pass\n",
      "javascript": "function total_n_queens(n) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "n": 1
        },
        "outputs": 1
      },
      {
        "inputs": {
          "n": 2
        },
        "outputs": 0
      },
      {
        "inputs": {
          "n": 3
        },
        "outputs": 0
      },
      {
        "inputs": {
          "n": 4
        },
        "outputs": 2
      },
      {
        "inputs": {
          "n": 5
        },
        "outputs": 10
      },
      {
        "inputs": {
          "n": 6
        },
        "outputs": 4
      },
      {
        "inputs": {
          "n": 7
        },
        "outputs": 40
      },
      {
        "inputs": {
          "n": 8
        },
        "outputs": 92
      },
      {
        "inputs": {
          "n": 9
        },
        "outputs": 352
      },
      {
        "inputs": {
          "n": 10
        },
        "outputs": 724
      }
    ],
    "target_func": "total_n_queens"
  },
  {
    "title": "Largest Rectangle in Histogram",
    "prompt": "Implement largest_rectangle_area(heights) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def largest_rectangle_area(heights):\n    # TODO: implement\n    pass\n",
      "javascript": "function largest_rectangle_area(heights) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "heights": [
            2,
            1,
            5,
            6,
            2,
            3
          ]
        },
        "outputs": 10
      },
      {
        "inputs": {
          "heights": [
            2,
            4
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "heights": [
            6,
            7,
            5,
            2,
            4,
            5,
            9,
            3
          ]
        },
        "outputs": 16
      },
      {
        "inputs": {
          "heights": [
            1,
            1,
            1,
            1
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "heights": [
            4,
            2,
            0,
            3,
            2,
            5
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "heights": [
            5
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "heights": [
            0
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "heights": [
            2,
            1,
            2
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "heights": [
            3,
            6,
            5,
            7,
            4,
            8,
            1,
            0
          ]
        },
        "outputs": 20
      },
      {
        "inputs": {
          "heights": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "outputs": 9
      }
    ],
    "target_func": "largest_rectangle_area"
  },
  {
    "title": "Maximal Rectangle",
    "prompt": "Implement maximal_rectangle(matrix) -> int, where matrix is a list of '0'/'1' rows.",
    "difficulty": 3,
    "initial_code": {
      "python": "def maximal_rectangle(matrix):\n    # TODO: implement\n    pass\n",
      "javascript": "function maximal_rectangle(matrix) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "matrix": [
            [
              "1",
              "0",
              "1",
              "0",
              "0"
            ],
            [
              "1",
              "0",
              "1",
              "1",
              "1"
            ],
            [
              "1",
              "1",
              "1",
              "1",
              "1"
            ],
            [
              "1",
              "0",
              "0",
              "1",
              "0"
            ]
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "matrix": [
            [
              "0"
            ]
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "matrix": [
            [
              "1"
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "matrix": [
            [
              "0",
              "1"
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "matrix": [
            [
              "1",
              "0"
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "matrix": [
            [
              "1",
              "1",
              "1",
              "1"
            ],
            [
              "1",
              "1",
              "1",
              "1"
            ]
          ]
        },
        "outputs": 8
      },
      {
        "inputs": {
          "matrix": [
            [
              "1",
              "0",
              "1",
              "1"
            ],
            [
              "1",
              "1",
              "1",
              "1"
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "matrix": [
            [
              "0",
              "0",
              "0"
            ],
            [
              "0",
              "0",
              "0"
            ],
            [
              "0",
              "0",
              "0"
            ]
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "matrix": [
            [
              "1",
              "0",
              "1",
              "0",
              "1"
            ],
            [
              "1",
              "1",
              "1",
              "1",
              "1"
            ],
            [
              "0",
              "1",
              "1",
              "1",
              "1"
            ]
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "matrix": [
            [
              "1",
              "1",
              "0"
            ],
            [
              "1",
              "1",
              "0"
            ],
            [
              "0",
              "1",
              "1"
            ]
          ]
        },
        "outputs": 4
      }
    ],
    "target_func": "maximal_rectangle"
  },
  {
    "title": "Wildcard Matching",
    "prompt": "Implement is_match_wildcard(s, p) -> bool with '?' and '*'.",
    "difficulty": 3,
    "initial_code": {
      "python": "def is_match_wildcard(s, p):\n    # TODO: implement\n    pass\n",
      "javascript": "function is_match_wildcard(s, p) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "aa",
          "p": "a"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "aa",
          "p": "*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "cb",
          "p": "?a"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "adceb",
          "p": "*a*b"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "acdcb",
          "p": "a*c?b"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "",
          "p": "*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "",
          "p": "?"
        },
        "outputs": false
      },
      {
        "inputs": {
          "s": "abc",
          "p": "abc*"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "abc",
          "p": "a*?"
        },
        "outputs": true
      },
      {
        "inputs": {
          "s": "xyz",
          "p": "*x"
        },
        "outputs": false
      }
    ],
    "target_func": "is_match_wildcard"
  },
  {
    "title": "Burst Balloons",
    "prompt": "Implement max_coins(nums) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def max_coins(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function max_coins(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            3,
            1,
            5,
            8
          ]
        },
        "outputs": 167
      },
      {
        "inputs": {
          "nums": [
            1,
            5
          ]
        },
        "outputs": 10
      },
      {
        "inputs": {
          "nums": [
            7
          ]
        },
        "outputs": 7
      },
      {
        "inputs": {
          "nums": [
            0,
            1,
            2,
            3
          ]
        },
        "outputs": 12
      },
      {
        "inputs": {
          "nums": [
            9,
            76,
            64,
            21,
            97
          ]
        },
        "outputs": 669494
      },
      {
        "inputs": {
          "nums": [
            1,
            1,
            1,
            1
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            2,
            2,
            2
          ]
        },
        "outputs": 14
      },
      {
        "inputs": {
          "nums": [
            8,
            2,
            6,
            8,
            1
          ]
        },
        "outputs": 560
      },
      {
        "inputs": {
          "nums": [
            3,
            0,
            5
          ]
        },
        "outputs": 20
      },
      {
        "inputs": {
          "nums": [
            5,
            10,
            15
          ]
        },
        "outputs": 840
      }
    ],
    "target_func": "max_coins"
  },
  {
    "title": "Palindrome Partitioning II (min cuts)",
    "prompt": "Implement min_cut(s) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def min_cut(s):\n    # TODO: implement\n    pass\n",
      "javascript": "function min_cut(s) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "s": "aab"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "a"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "ab"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "noon"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "banana"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "racecar"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "abcba"
        },
        "outputs": 0
      },
      {
        "inputs": {
          "s": "cdd"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": "abbaeae"
        },
        "outputs": 1
      },
      {
        "inputs": {
          "s": ""
        },
        "outputs": 0
      }
    ],
    "target_func": "min_cut"
  },
  {
    "title": "Longest Consecutive Sequence",
    "prompt": "Implement longest_consecutive(nums) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def longest_consecutive(nums):\n    # TODO: implement\n    pass\n",
      "javascript": "function longest_consecutive(nums) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            100,
            4,
            200,
            1,
            3,
            2
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": []
        },
        "outputs": 0
      },
      {
        "inputs": {
          "nums": [
            0,
            3,
            7,
            2,
            5,
            8,
            4,
            6,
            0,
            1
          ]
        },
        "outputs": 9
      },
      {
        "inputs": {
          "nums": [
            9
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            0,
            1
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "nums": [
            10,
            5,
            12,
            3,
            55,
            30,
            4,
            11,
            2
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "nums": [
            -1,
            -2,
            -3,
            0,
            1,
            2,
            3
          ]
        },
        "outputs": 7
      },
      {
        "inputs": {
          "nums": [
            1,
            3,
            5,
            2,
            4,
            6,
            7,
            8
          ]
        },
        "outputs": 8
      },
      {
        "inputs": {
          "nums": [
            50,
            51,
            52,
            10,
            11,
            12,
            13,
            14
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "nums": [
            100,
            101,
            103,
            102,
            104
          ]
        },
        "outputs": 5
      }
    ],
    "target_func": "longest_consecutive"
  },
  {
    "title": "Median Sliding Window",
    "prompt": "Implement median_sliding_window(nums, k) -> list[float].",
    "difficulty": 3,
    "initial_code": {
      "python": "def median_sliding_window(nums, k):\n    # TODO: implement\n    pass\n",
      "javascript": "function median_sliding_window(nums, k) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "nums": [
            1,
            3,
            -1,
            -3,
            5,
            3,
            6,
            7
          ],
          "k": 3
        },
        "outputs": [
          1.0,
          -1.0,
          -1.0,
          3.0,
          5.0,
          6.0
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2,
            3,
            4,
            2,
            3,
            1,
            4,
            2
          ],
          "k": 3
        },
        "outputs": [
          2.0,
          3.0,
          3.0,
          3.0,
          2.0,
          3.0,
          2.0
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            4,
            2,
            3
          ],
          "k": 4
        },
        "outputs": [
          2.5
        ]
      },
      {
        "inputs": {
          "nums": [
            7,
            8,
            8,
            7,
            7,
            8
          ],
          "k": 2
        },
        "outputs": [
          7.5,
          8.0,
          7.5,
          7.0,
          7.5
        ]
      },
      {
        "inputs": {
          "nums": [
            5
          ],
          "k": 1
        },
        "outputs": [
          5.0
        ]
      },
      {
        "inputs": {
          "nums": [
            9,
            0,
            1,
            2,
            3,
            4
          ],
          "k": 2
        },
        "outputs": [
          4.5,
          0.5,
          1.5,
          2.5,
          3.5
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2
          ],
          "k": 1
        },
        "outputs": [
          1.0,
          2.0
        ]
      },
      {
        "inputs": {
          "nums": [
            1,
            2
          ],
          "k": 2
        },
        "outputs": [
          1.5
        ]
      },
      {
        "inputs": {
          "nums": [
            2,
            3,
            4,
            2,
            6,
            2,
            5,
            1
          ],
          "k": 3
        },
        "outputs": [
          3.0,
          3.0,
          4.0,
          2.0,
          5.0,
          2.0
        ]
      },
      {
        "inputs": {
          "nums": [
            0,
            0,
            0,
            0
          ],
          "k": 2
        },
        "outputs": [
          0.0,
          0.0,
          0.0
        ]
      }
    ],
    "target_func": "median_sliding_window"
  },
  {
    "title": "Russian Doll Envelopes",
    "prompt": "Implement max_envelopes(envelopes) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def max_envelopes(envelopes):\n    # TODO: implement\n    pass\n",
      "javascript": "function max_envelopes(envelopes) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "envelopes": [
            [
              5,
              4
            ],
            [
              6,
              4
            ],
            [
              6,
              7
            ],
            [
              2,
              3
            ]
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "envelopes": [
            [
              1,
              1
            ],
            [
              1,
              1
            ],
            [
              1,
              1
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "envelopes": [
            [
              4,
              5
            ],
            [
              4,
              6
            ],
            [
              6,
              7
            ],
            [
              2,
              3
            ],
            [
              1,
              1
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "envelopes": [
            [
              2,
              100
            ],
            [
              3,
              200
            ],
            [
              4,
              300
            ],
            [
              5,
              500
            ],
            [
              5,
              400
            ],
            [
              5,
              250
            ],
            [
              6,
              370
            ],
            [
              6,
              360
            ],
            [
              7,
              380
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "envelopes": [
            [
              10,
              8
            ],
            [
              1,
              12
            ],
            [
              6,
              15
            ],
            [
              2,
              3
            ]
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "envelopes": [
            [
              1,
              3
            ],
            [
              3,
              5
            ],
            [
              6,
              7
            ],
            [
              6,
              8
            ],
            [
              8,
              4
            ],
            [
              9,
              5
            ]
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "envelopes": [
            [
              2,
              3
            ],
            [
              3,
              4
            ],
            [
              4,
              5
            ],
            [
              5,
              6
            ],
            [
              6,
              7
            ],
            [
              7,
              8
            ]
          ]
        },
        "outputs": 6
      },
      {
        "inputs": {
          "envelopes": [
            [
              5,
              4
            ],
            [
              5,
              5
            ],
            [
              5,
              6
            ],
            [
              5,
              3
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "envelopes": [
            [
              1,
              2
            ],
            [
              2,
              3
            ],
            [
              3,
              4
            ],
            [
              4,
              5
            ],
            [
              5,
              6
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "envelopes": [
            [
              2,
              2
            ]
          ]
        },
        "outputs": 1
      }
    ],
    "target_func": "max_envelopes"
  },
  {
    "title": "Longest Increasing Path in a Matrix",
    "prompt": "Implement longest_increasing_path(matrix) -> int.",
    "difficulty": 3,
    "initial_code": {
      "python": "def longest_increasing_path(matrix):\n    # TODO: implement\n    pass\n",
      "javascript": "function longest_increasing_path(matrix) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "matrix": [
            [
              9,
              9,
              4
            ],
            [
              6,
              6,
              8
            ],
            [
              2,
              1,
              1
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "matrix": [
            [
              3,
              4,
              5
            ],
            [
              3,
              2,
              6
            ],
            [
              2,
              2,
              1
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "matrix": [
            [
              1
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2
            ]
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "matrix": [
            [
              7,
              7,
              5
            ],
            [
              2,
              4,
              6
            ],
            [
              8,
              2,
              0
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              3
            ],
            [
              6,
              5,
              4
            ],
            [
              7,
              8,
              9
            ]
          ]
        },
        "outputs": 9
      },
      {
        "inputs": {
          "matrix": [
            [
              3,
              3,
              3
            ],
            [
              3,
              3,
              3
            ],
            [
              3,
              3,
              3
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "matrix": [
            [
              9,
              8,
              7
            ],
            [
              6,
              5,
              4
            ],
            [
              3,
              2,
              1
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              3,
              2
            ],
            [
              4,
              6,
              5
            ],
            [
              9,
              7,
              8
            ]
          ]
        },
        "outputs": 5
      },
      {
        "inputs": {
          "matrix": [
            [
              1,
              2,
              1
            ],
            [
              1,
              2,
              1
            ],
            [
              1,
              2,
              1
            ]
          ]
        },
        "outputs": 2
      }
    ],
    "target_func": "longest_increasing_path"
  },
  {
    "title": "Course Schedule III",
    "prompt": "Implement schedule_course(courses) -> int, maximizing courses taken.",
    "difficulty": 3,
    "initial_code": {
      "python": "def schedule_course(courses):\n    # TODO: implement\n    pass\n",
      "javascript": "function schedule_course(courses) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "courses": [
            [
              100,
              200
            ],
            [
              200,
              1300
            ],
            [
              1000,
              1250
            ],
            [
              2000,
              3200
            ]
          ]
        },
        "outputs": 3
      },
      {
        "inputs": {
          "courses": [
            [
              1,
              2
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "courses": [
            [
              3,
              2
            ],
            [
              4,
              3
            ]
          ]
        },
        "outputs": 0
      },
      {
        "inputs": {
          "courses": [
            [
              5,
              5
            ],
            [
              4,
              6
            ],
            [
              2,
              6
            ]
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "courses": [
            [
              5,
              5
            ],
            [
              4,
              6
            ],
            [
              2,
              6
            ],
            [
              1,
              2
            ]
          ]
        },
        "outputs": 2
      },
      {
        "inputs": {
          "courses": [
            [
              7,
              17
            ],
            [
              3,
              12
            ],
            [
              10,
              20
            ],
            [
              9,
              10
            ],
            [
              5,
              20
            ],
            [
              10,
              19
            ],
            [
              4,
              18
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "courses": [
            [
              5,
              5
            ],
            [
              5,
              6
            ],
            [
              5,
              7
            ],
            [
              5,
              8
            ]
          ]
        },
        "outputs": 1
      },
      {
        "inputs": {
          "courses": [
            [
              2,
              5
            ],
            [
              2,
              6
            ],
            [
              3,
              7
            ],
            [
              3,
              8
            ],
            [
              1,
              9
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "courses": [
            [
              100,
              200
            ],
            [
              200,
              1300
            ],
            [
              100,
              1250
            ],
            [
              2000,
              3200
            ],
            [
              3000,
              4000
            ]
          ]
        },
        "outputs": 4
      },
      {
        "inputs": {
          "courses": [
            [
              1,
              100
            ],
            [
              50,
              60
            ],
            [
              70,
              80
            ],
            [
              30,
              40
            ]
          ]
        },
        "outputs": 2
      }
    ],
    "target_func": "schedule_course"
  },
  {
    "title": "Alien Dictionary",
    "prompt": "Implement alien_order(words) -> str (any valid order; empty string if invalid).",
    "difficulty": 3,
    "initial_code": {
      "python": "def alien_order(words):\n    # TODO: implement\n    pass\n",
      "javascript": "function alien_order(words) {\n  // TODO: implement\n}\n"
    },
    "test_cases": [
      {
        "inputs": {
          "words": [
            "wrt",
            "wrf",
            "er",
            "ett",
            "rftt"
          ]
        },
        "outputs": "wertf"
      },
      {
        "inputs": {
          "words": [
            "z",
            "x"
          ]
        },
        "outputs": "zx"
      },
      {
        "inputs": {
          "words": [
            "z",
            "x",
            "z"
          ]
        },
        "outputs": ""
      },
      {
        "inputs": {
          "words": [
            "abc",
            "ab"
          ]
        },
        "outputs": ""
      },
      {
        "inputs": {
          "words": [
            "ab",
            "adc"
          ]
        },
        "outputs": "abcd"
      },
      {
        "inputs": {
          "words": [
            "x",
            "xy",
            "xyz"
          ]
        },
        "outputs": "xyz"
      },
      {
        "inputs": {
          "words": [
            "baa",
            "abcd",
            "abca",
            "cab",
            "cad"
          ]
        },
        "outputs": "bdac"
      },
      {
        "inputs": {
          "words": [
            "caa",
            "aaa",
            "aab"
          ]
        },
        "outputs": "cab"
      },
      {
        "inputs": {
          "words": [
            "a",
            "b",
            "ca",
            "cc"
          ]
        },
        "outputs": "abc"
      },
      {
        "inputs": {
          "words": [
            "ri",
            "xz",
            "qxf",
            "rh",
            "ryp",
            "y",
            "rhya",
            "rz",
            "rzz",
            "rzx"
          ]
        },
        "outputs": ""
      }
    ],
    "target_func": "alien_order"
  }
]